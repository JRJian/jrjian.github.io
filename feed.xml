<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jian Blog</title>
    <description></description>
    <link>http://jrjian.github.io/</link>
    <atom:link href="http://jrjian.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 30 Dec 2015 22:25:56 +0800</pubDate>
    <lastBuildDate>Wed, 30 Dec 2015 22:25:56 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>NSValueTransformer教程</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;由于最近在用Mantle框架，发现代码中使用了 &lt;code&gt;NSValueTransformer&lt;/code&gt;，看懵了，不知道是用来干啥的，根据字面意思猜了个大概是 &lt;em&gt;值转换&lt;/em&gt;，为了认清这个东西，所以去了&lt;a href=&quot;http://nshipster.cn&quot;&gt;NSHipster&lt;/a&gt;查看了相关教程。由于发现作者讲的东西相对对于初学者来说可能有些难消化，所以产生了对原文进行更清晰的讲解的念头。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NSValueTransformer&lt;/code&gt; 是一个抽象类，用来将一个输入的类型值转换成另为一个类型值，主要被用于 AppKit 框架的 Cocoa binding 中。它指定了可以处理哪类输入，并且合适时甚至支持反向的转换。&lt;/p&gt;

&lt;p&gt;创建一个 &lt;code&gt;NSValueTransformer&lt;/code&gt; 子类，重写几个必要的方法来实现自定义转化。&lt;br /&gt;
有些类似于 &lt;code&gt;Protocol&lt;/code&gt;，定义了一些需要子类自己去实现的方法。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实战&lt;/h2&gt;

&lt;p&gt;下面继承自 &lt;code&gt;NSValueTransformer&lt;/code&gt; 的实现代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassNameTransformer: NSValueTransformer {}// 继承NSValueTransformer
@end

#pragma mark -

@implementation ClassNameTransformer

+ (Class)transformedValueClass {// 输出的源的类型
    // 经过测试，调用转换的时候，并没有调用该方法，
    // 该方法只是告诉使用者，我输出的类型是 NSString 类型
    return [NSString class];
}

+ (BOOL)allowsReverseTransformation {// 是否允许逆向转换
    // YES 需要实现 reverseTransformedValue:
    // NO 不需要实现
    // ⚠️：当返回 NO，如果调用了 reverseTransformedValue，
        由于当前类没有实现该方法，系统会自动调用 transformedValue:
    return NO; 
}

- (id)transformedValue:(id)value {// 转换输入的值成另一个值
    // 返回输入的值对应类型的字符串
    return (value == nil) ? nil : NSStringFromClass([value class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们通常不会直接初始化 &lt;code&gt;NSValueTransformer&lt;/code&gt;。而是，与 &lt;code&gt;NSPersistentStore&lt;/code&gt; 和 &lt;code&gt;NSURLProtocol&lt;/code&gt; 类似，需要注册相应的实现类&lt;code&gt;setValueTransformer:forName:&lt;/code&gt;，由管理者角色的对象负责初始化它们——这里有点不同的是，你需要为注册的对象指定一个唯一的名字。&lt;/p&gt;

&lt;p&gt;下面是Demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString * const ClassNameTransformerName = @&quot;ClassNameTransformer&quot;;

// 注册
[NSValueTransformer setValueTransformer:[[ClassNameTransformer alloc] init] forName:ClassNameTransformerName];

// 获得已经注册过的 NSValueTransformer
NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:ClassNameTransformerName];

NSDate *date = [NSDate date];
NSString *className = [valueTransformer transformedValue:date];

// 由于 ClassNameTransformer 没有实现 reverseTransformedValue:
// 故系统自动调用 transformedValue:
NSString *value     = [valueTransformer reverseTransformedValue:className];
NSLog(@&quot;%@, %@&quot;, className, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果输出 __NSDate， NSTaggedPointerString&lt;/p&gt;

&lt;p&gt;我们可以在实现 &lt;code&gt;ClassNameTransformer&lt;/code&gt; 的时候，在 &lt;code&gt;+initialize&lt;/code&gt; 方法中注册该对象，这样我们在使用的时候，就直接获取该 &lt;code&gt;transformer&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;改版后的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern NSString * const ClassNameTransformerName;

@interface ClassNameTransformer: NSValueTransformer {}
@end

#pragma mark -

NSString * const ClassNameTransformerName = @&quot;ClassNameTransformer&quot;;

@implementation ClassNameTransformer

+ (void)initialize {
    [NSValueTransformer setValueTransformer:[[ClassNameTransformer alloc] init] forName:ClassNameTransformerName];
}

+ (Class)transformedValueClass {
    return [NSString class];
}

+ (BOOL)allowsReverseTransformation {
    return YES;
}

- (id)transformedValue:(id)value {
    return (value == nil) ? nil : NSStringFromClass([value class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改版后的demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:ClassNameTransformerName];

NSDate *date = [NSDate date];
NSString *className = [valueTransformer transformedValue:date];
NSString *value     = [valueTransformer reverseTransformedValue:className];
NSLog(@&quot;%@, %@&quot;, className, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-3&quot;&gt;优化&lt;/h2&gt;

&lt;p&gt;到这里你可能发现了 &lt;code&gt;NSValueTransformer&lt;/code&gt; 的一个大毛病：它太难用了！如果定义多个转换器，那不是有很多冗余的代码？创建一个类，实现一大把的方法，声明一个常量，并且还要在 &lt;code&gt;+initialize&lt;/code&gt; 方法中注册它？我看还是别用算了。&lt;/p&gt;

&lt;p&gt;在这个使用 &lt;code&gt;block&lt;/code&gt; 的年代，我们想要——不对，需要——一种一行（坨）代码就能搞定的实现方式。&lt;/p&gt;

&lt;p&gt;一点儿元编程就可以轻松搞定这件事情。&lt;a href=&quot;https://github.com/mattt/TransformerKit/blob/master/TransformerKit/NSValueTransformer%2BTransformerKit.m#L36&quot;&gt;戳这里获取封装好的代码&lt;/a&gt;，然后我们使用的时候可以如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString * const TKCapitalizedStringTransformerName = @&quot;TKCapitalizedStringTransformerName&quot;;

// 注册一个实现了逆向转换的 NSValueTransformer 
[NSValueTransformer registerValueTransformerWithName:TKCapitalizedStringTransformerName transformedValueClass:[NSString class] returningTransformedValueWithBlock:^id(id value) {
    return [value capitalizedString];
} allowingReverseTransformationWithBlock:^id(id value) {
    return [value lowercaseString];
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作者是利用了 &lt;code&gt;runtime&lt;/code&gt; 的机制，将这几个需要实现的方法通过用 &lt;code&gt;block&lt;/code&gt; 的方式在运行时动态生成自定义的 &lt;code&gt;NSValueTransformer&lt;/code&gt; 对象，是不是很方便。&lt;br /&gt;
也许有人会问，这种数据转化我自定义一个类方法不就好了，如果需要逆向，实现两个互相转化的工具方法就好了，为什么需要用 &lt;code&gt;NSValueTransformer&lt;/code&gt; 这么复杂的东西？&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;优点:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;NSValueTransformers&lt;/code&gt; 可以很好地用于表示一个转换链。比如，一个应用可能需要把用户输入经过一系列的转换（比如，去掉首尾空格，去掉注音字符，然后让首字母大写）后才能把结果发送到主干系统中。&lt;/li&gt;
  &lt;li&gt;与 &lt;code&gt;block&lt;/code&gt; 不同的是，&lt;code&gt;NSValueTransformer&lt;/code&gt; 封装了反向转换。比如说，你想要把 REST API 中的键值与模型对象的属性一一对应(&lt;a href=&quot;https://github.com/Mantle/Mantle&quot;&gt;Mantle&lt;/a&gt;)；你可以创建一个可以逆向转换的 &lt;code&gt;NSValueTransformer&lt;/code&gt; 类，初始化时把 snake_case 转换为 llamaCase，发送数据到服务器端时把 llamaCase 转换为 snake_case。&lt;/li&gt;
  &lt;li&gt;另外一个优于 &lt;code&gt;block&lt;/code&gt; 的地方是：&lt;code&gt;NSValueTransformer&lt;/code&gt; 子类可以暴露出新的属性来配置转换行为。增加成员变量还可以简单清楚地记录结果，或者保存一些转换过程中需要用到的东西。&lt;/li&gt;
  &lt;li&gt;不要忘了，我们还可以用在 &lt;code&gt;Core Data&lt;/code&gt; 中使用 &lt;code&gt;NSValueTransformer&lt;/code&gt;，可以用它从二进制字段中编码及解码出组合数据。这些年似乎不再流行这么做了，但是，对于那些模型化得不是很好的信息，把简单的数据用这种方式序列化是非常有效的。但是不要这样把图片存到数据库中——那八成不会是个好主意。 &lt;em&gt;(这个我也不是很懂！)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 00:44:33 +0800</pubDate>
        <link>http://jrjian.github.io/2015/12/20/iOS-NSValueTransformer-tutorial/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/12/20/iOS-NSValueTransformer-tutorial/</guid>
        
        <category>iOS</category>
        
        <category>NSValueTransformer</category>
        
        <category>教程</category>
        
        
      </item>
    
      <item>
        <title>iOS实用小功能</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;播打电话号码&lt;/h2&gt;

&lt;p&gt;1.最直接方式 &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;tel://020-10086&quot;]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：打完电话后，停留在通讯录界面，不会自动跳回APP界面。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.访问私有API&lt;/p&gt;

&lt;p&gt;&lt;em&gt;该方式拨号，会先提示是否进行拨打。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;telprompt://020-10086&quot;]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：私有API，可能会被苹果审核不通过，拒绝发布。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.通过内嵌UIWebView，拨打完毕后，会自动切回APP界面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;UIWebView *myWebView = [[UIWebView alloc] initWithFrame:CGRectZero];
[myWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;tel://020-10086&quot;]]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;注意：不需要addSubview&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;app-store&quot;&gt;跳转到APP Store评分界面&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;NSString *urlStr = @&quot;替换成下面提供的两种方式&quot;;
NSURL *url = [NSURL URLWithString:urlStr];
if ([[UIApplication sharedApplication] canOpenURL:url]) {
    [[UIApplication sharedApplication] openURL:url];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;你的设备IOS版本&amp;gt;=IOS7&lt;/code&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;@&quot;itms-apps://itunes.apple.com/app/YOUR_APP_ID&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;你的设备IOS版本&amp;lt;IOS7&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;@&quot;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;amp;id=YOUR_APP_ID&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;发短信&lt;/h2&gt;

&lt;p&gt;1.最直接方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;sms://10086&quot;]];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;式缺点：不能指定短信内容，并且操作完毕后，不会跳回APP界面&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.采用&lt;code&gt;MFMessageComposeViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1).先引入框架&lt;code&gt;#import &amp;lt;MessageUI/MessageUI.h&amp;gt;&lt;/code&gt;   &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;if ([MFMailComposeViewController canSendMail]) {
    MFMessageComposeViewController *messageController = [[MFMessageComposeViewController alloc] init];
    messageController.body = @&quot;短信内容&quot;;
    messageController.recipients = @[@&quot;收件人列表-1-10086&quot;,@&quot;2-10000&quot;];
    messageController.delegate = self;
    [self presentViewController:messageController animated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2).实现委托&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;#pragma mark - MFMessageComposeViewControllerDelegate
- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    [controller dismissViewControllerAnimated:YES completion:nil];
    if (result == MessageComposeResultCancelled) {
        NSLog(@&quot;取消发送&quot;);
    } else if (result == MessageComposeResultSent) {
        NSLog(@&quot;发送成功&quot;);
    } else {
        NSLog(@&quot;发送失败&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;优点：可以指定发送内容，发送完毕可以切回APP界面。&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;发邮件&lt;/h2&gt;

&lt;p&gt;1.最直接方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;NSString *url = @&quot;mailto:自己的邮箱@qq.com?cc=抄送人&amp;amp;subject=主题!&amp;amp;body=内容!&quot;; 
[[UIApplication sharedApplication] openURL: [NSURL URLWithString: url]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：字符串复杂，可读性差。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.采用&lt;code&gt;MFMailComposeViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1).先引入框架&lt;code&gt;#import &amp;lt;MessageUI/MessageUI.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;if ([MFMailComposeViewController canSendMail]) {
    MFMailComposeViewController* mailController = [[MFMailComposeViewController alloc] init];
    mailController.mailComposeDelegate = self;
    [mailController setSubject:@&quot;标题&quot;];
    [mailController setMessageBody:@&quot;邮件内容。&quot; isHTML:NO];
    [mailController setToRecipients:@[@&quot;收件人1&quot;, @&quot;收件人2&quot;,]];
    [mailController setCcRecipients:@[@&quot;抄送人1&quot;, @&quot;抄送人2&quot;,]];
    [mailController setBccRecipients:@[@&quot;密送人1&quot;, @&quot;密送人2&quot;,]];
    if (mailController)
        [self presentViewController:mailController animated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2).实现委托&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;#pragma mark - MFMailComposeViewControllerDelegate
- (void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {
    /*
    enum MFMailComposeResult {
        MFMailComposeResultCancelled, //取消发送
        MFMailComposeResultSaved, //保存草稿
        MFMailComposeResultSent, //发送成功
        MFMailComposeResultFailed, //发送失败
    };
    */
    [controller dismissViewControllerAnimated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;应用程序之间跳转&lt;/h2&gt;

&lt;p&gt;1.被跳转的APP设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意：URL Schemes是一个数组，可以用逗号隔开&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015-12-08-iOS-small-functions/illustration-1.jpg&quot; alt=&quot;设置引导图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.打开其他APP的代码如下，identifier跟schemes就是上图设置的URL Types参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;// @param Identifier:需要跳入的应用程序配置文件设置的APP URL type里面的identifier
// @param UrlSchemes:需要跳入的应用程序配置文件设置的APP URL type里面的URL scheme
NSURL *appUrl = [NSURL URLWithString:@&quot;Identifier://UrlSchemes&quot;];
UIApplication *app = [UIApplication sharedApplication];
// 1.先判断能否打开软件
if ([app canOpenURL:appUrl]) {
    [app openURL:appUrl];
} else { // 2.不能打开，去appStore下载
    NSURL *downloadUrl = [NSURL URLWithString:@&quot;yourAppUrl&quot;];
    if ([app canOpenURL:downloadUrl]) {
        app openURL:downloadUrl];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.通过safari游览器打开APP&lt;/p&gt;

&lt;p&gt;&lt;code&gt;在地址栏输入要打开的APP的URL schemes即可，如testApp://&lt;/code&gt;&lt;br /&gt;
   &lt;code&gt;带参数形式：testApp://?token=123abct&amp;amp;registered=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4.通过访问网页打开APP&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;待续…&lt;/h1&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 05:49:33 +0800</pubDate>
        <link>http://jrjian.github.io/2015/12/09/iOS-small-functions/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/12/09/iOS-small-functions/</guid>
        
        <category>iOS</category>
        
        <category>实用功能</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Jian Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Jian 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 年，Jian 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;在玩了github之后，发现github可以定制自己的网站。所以花了一天时间搞搞Personal Blog!&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。  &lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io#featured-tags&quot;&gt;Hux Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功 &lt;a href=&quot;https://ruby.taobao.org&quot;&gt;RubyGems 镜像&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），**Hux Blog的作者补了很多Bootstrap的缺陷，并且优化了文字布局排版等，具体可以看&lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io#featured-tags&quot;&gt;原文&lt;/a&gt;……&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;蛮喜欢这个主题风格的blog，后续慢慢加强前端的技能，同时build出令自己满意的Jian Blog!&lt;/p&gt;

&lt;p&gt;—— Jian 后记于 2015.10&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 20:00:00 +0800</pubDate>
        <link>http://jrjian.github.io/2015/11/28/hello-2015/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/11/28/hello-2015/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
