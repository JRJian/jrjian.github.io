<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jian Blog</title>
    <description></description>
    <link>http://jrjian.github.io/</link>
    <atom:link href="http://jrjian.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 06 Mar 2016 19:51:54 +0800</pubDate>
    <lastBuildDate>Sun, 06 Mar 2016 19:51:54 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>学习Swift开发iOS应用教程第四篇「译」</title>
        <description>&lt;p&gt;很高兴，你来到Swift教程系列编写iOS应用第四部分！&lt;/p&gt;

&lt;p&gt;在系列的第一部分，你学会了Swift编程基础知识。学习了变量，if/else语句，循环，可选类型等等。&lt;/p&gt;

&lt;p&gt;在系列的第二部分，你将所学到的技能运用到一个简单的猜数字的游戏中.&lt;/p&gt;

&lt;p&gt;在系列的第三部分，你创建了一个记录用户名和年龄的命令行应用。&lt;/p&gt;

&lt;p&gt;在系列的第四部分，是时候创建您的第一个 &lt;em&gt;iPhone&lt;/em&gt; 应用！&lt;/p&gt;

&lt;p&gt;在这一教程中，你会学着创建一个应用，应用名叫 &lt;em&gt;点击我吧(Tap Me)&lt;/em&gt; ！该应用的玩法是在30秒的时间内，尽你最快的速度点击应用的按钮，最终应用将会告诉你30秒内点击的次数（其实就是类似微信里面第三方的一些加油活动）。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;开始（多图预警）&lt;/h1&gt;

&lt;p&gt;打开Xcode,点击 &lt;em&gt;Get started with a playground&lt;/em&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/1.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后选择 &lt;em&gt;iOS &amp;gt; Application &amp;gt; Single View Application&lt;/em&gt; 点击 &lt;em&gt;Next&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/2.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面的屏幕中，根据指示填写表格：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Name           : Tap Me&lt;/li&gt;
  &lt;li&gt;Organization Name      : 选填&lt;/li&gt;
  &lt;li&gt;Organization Identifier: 输入 com.yourname, 例如 com.rybristow&lt;/li&gt;
  &lt;li&gt;Language               : Swift&lt;/li&gt;
  &lt;li&gt;Devie                  : iPhone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/3.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;storyboards&quot;&gt;故事板（Storyboards）&lt;/h1&gt;

&lt;p&gt;您将会发现这个项目创建成功之后的目录结构跟之前的命令行项目不同。第一个不同点就是下面选中的这个文件 &lt;em&gt;Main.storyboard&lt;/em&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/4.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你开打这个文件，将会印入眼帘的是一个模拟 iPhone 手机运行时的窗口的图形用户界面(GUI)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/5.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意: 你也许会问为什么 iPhone 的屏幕看起来像个方形。 在 iOS 开发中，你的目标是设计你自己的应用因此它们应该适配各种尺寸的屏幕 - 这叫做 &lt;em&gt;自应式布局（Adaptive Layout）&lt;/em&gt; 。基本上，界面元素的布局排版根据 “离顶部距离多远” 或 “居中” 的原则；这种方式布局能够在多种尺寸的屏幕适用，从 iPhone 5 到 iPhone 6 Plus 等等&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在，该应用的界面是空白一片并且非常无趣。做一些事情改变下它，首先确保你选中并打开了右边的工具菜单(Utilities Menu)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/6.png&quot; alt=&quot;图6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着，选中属性检查器(Attributes Inspector)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/7.png&quot; alt=&quot;图7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样你就可以看到控制器(View Controller)的界面属性以及修改它们。确保你第一个点击的视图(View)能够看到它的属性。&lt;/p&gt;

&lt;p&gt;修改视图的背景色为绿色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/8.png&quot; alt=&quot;图8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，在顶部的菜单选择 &lt;em&gt;iPhone 6 模拟器&lt;/em&gt; 并运行它，你就能看到运行的界面是什么样子。编译和运行你的程序会花一点时间，请耐心等待。当它运行完成的时候，你将会看到一个窗口弹出，该窗口模拟着 iPhone 手机界面并运行着您的应用程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/9.png&quot; alt=&quot;图9&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;labels&quot;&gt;往屏幕增加标签(Labels)&lt;/h1&gt;

&lt;p&gt;你的程序看上去运行的很好，但是界面太不美观因为它没有任何可以跟用户交互的内容。为界面添加对象，你需要在工具菜单的对象库(Object Library)里找到名叫标签(Label)的对象，标签的功能是显示文本，可以通过程序控制文本内容。滚动对象库直到你找到它为止。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/10.png&quot; alt=&quot;图10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拖动文本标签到屏幕的顶部并水平居中。  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/11.png&quot; alt=&quot;图11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以使用属性检查器来修改文本标签的标题。修改标签的标题为 “Time: 30”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/12.png&quot; alt=&quot;图12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此刻你的标签内容在屏幕显示应该是不完全的。为了解决这个问题，点击标签选择 &lt;em&gt;Editor\Size to Fit&lt;/em&gt;  (Command =快捷键)。&lt;/p&gt;

&lt;p&gt;现在，运行程序您应该看到的是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/13.png&quot; alt=&quot;图13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据你的故事板布局，标签应该显示在中间才对呀？问题是并不是每一个 iOS 社保拥有着相同的面积，所以有时候不能那么顺心。你需要做的是为标签增加一条约束(constraint)让它一直保持在中间。&lt;/p&gt;

&lt;p&gt;要实现这一点，首先点击标签。然后，选择屏幕底部的对齐按钮(Align button)并且勾选水平居中的约束，最后点击添加一条约束(Add 1 Constraint)按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/14.png&quot; alt=&quot;图14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该约束能够让标签固定在水平位置。但是你还需要定义它在垂直方向的位置。要实现这一点，点击屏幕底部的方块按钮(Pin button)并且点击红色的条子让它钉在屏幕的上方，基于它当前跟顶部的距离点击添加一条约束(Add 1 Constraint)按钮：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/15.png&quot; alt=&quot;图15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最新添加的标签约束会延展出一条橘色的参考线。这是因为文本标签的位置跟约束的指定位置不同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/16.png&quot; alt=&quot;图16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果这是个污点，点击右下角的三角图标，在 &lt;em&gt;All Views in View Controller&lt;/em&gt; 栏目选中 &lt;em&gt;Update Frames&lt;/em&gt; 选项。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/17.png&quot; alt=&quot;图17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，创建另一个标签在屏幕的底部用来记录点击次数。设置字体大小为 &lt;em&gt;40&lt;/em&gt; ，行数为 &lt;em&gt;2&lt;/em&gt; 以及 &lt;em&gt;对齐方式&lt;/em&gt; 居中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/18.png&quot; alt=&quot;图18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在尺寸检查器中，设置 &lt;em&gt;高度&lt;/em&gt; 为 &lt;em&gt;130&lt;/em&gt; 点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/19.png&quot; alt=&quot;图19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你最好为这个标签设置一些约束。首先你需要让它居中。选中分数标签，点击对齐按钮，选中 &lt;em&gt;Horizontal Center in Container&lt;/em&gt; 并且点击 &lt;em&gt;Add 1 Constraint&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;接着点击方块按钮。固定底部距离并且选中 &lt;em&gt;height&lt;/em&gt; 约束。设置高度为 &lt;em&gt;130&lt;/em&gt; 。最后，点击 &lt;em&gt;Add 2 Constraints&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/20.png&quot; alt=&quot;图20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你看见了许多橘色参考线，点击右下角的 &lt;em&gt;三角图标&lt;/em&gt; 并且在 &lt;em&gt;All Views in View Controller&lt;/em&gt; 栏目里选中 &lt;em&gt;Update Frames&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/21.png&quot; alt=&quot;图21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;编译并运行，现在你所有的标签都居中在屏幕上：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/22.png&quot; alt=&quot;图22&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;添加一个按钮&lt;/h1&gt;

&lt;p&gt;添加最后一个对象到屏幕，使用对象库添加一个按钮到屏幕并且固定在屏幕的中间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/23.png&quot; alt=&quot;图23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;别忘了为按钮添加约束，这次需要水平和垂直居中两条约束。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/24.png&quot; alt=&quot;图24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，使用 &lt;em&gt;属性检查器&lt;/em&gt; 来改变按钮的标题为 &lt;em&gt;Tap Me&lt;/em&gt;!并且设置背景成白色。为了让按钮显示更多的白色背景，你需要拉伸它并且设置其他约束。这次，你需要点击方块按钮并且设置它的宽为 &lt;em&gt;167&lt;/em&gt; 和高为 &lt;em&gt;113&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/25.png&quot; alt=&quot;图25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你看到了橘色参考线，可以参照教程的 &lt;em&gt;Update Frames&lt;/em&gt; 方法让它消失。&lt;/p&gt;

&lt;p&gt;你的按钮应该是一个拥有较大的可点击区域。编译并且运行，你的应用应该看起来如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/26.png&quot; alt=&quot;图26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以尝试疯狂的点击按钮，但是你发现什么事情都没有发生。接下来你会让它有所反应。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;连接视图和代码&lt;/h1&gt;

&lt;p&gt;现在故事板里的视图已经布局好了，你需要让它们跟代码关联起来。&lt;/p&gt;

&lt;p&gt;每一个 iOS 应用”屏幕”被一个叫 &lt;em&gt;View Controller（视图控制器）&lt;/em&gt; 的东西控制着。Xcode在模板中已经创建了一个 - &lt;em&gt;ViewController.swift&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;你需要在你的游戏中为这个类设置两个标签属性，这样你才能通过程序更新它们的内容。要实现这点，在 &lt;em&gt;ViewController.swift&lt;/em&gt; 的视图控制器类中添加以下两个属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@IBOutlet var scoreLabel: UILabel!
@IBOutlet var timerLabel: UILabel!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两行代码创建了两个 &lt;em&gt;UILabel&lt;/em&gt; 属性。此刻，你将会连接这两个属性所对应在故事板中的标签视图。通过为属性设置 &lt;em&gt;@IBOutlet&lt;/em&gt; 关键字，故事板编辑器就能够识别它们。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意：你也许察觉到标签的末尾有感叹号。这是标记标签为“强制解包可选类型”。这会使在你访问它们之前，编译器自动解包了可选类型，因此你可以将变量视作-不是可选类型变量，意思是普通变量(哪怕它们是可选变量)。&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;你可以这样做因为你已经确定你将会将它们设置成故事板里的视图，因此它们不可能为 &lt;em&gt;nil&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;类似地，你希望当按钮点击的时候调用一个函数。因此添加以下代码到 &lt;em&gt;ViewController&lt;/em&gt; 类中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@IBAction func buttonPressed()  {
  NSLog(&quot;Button Pressed&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跟 &lt;em&gt;@IBOutlet&lt;/em&gt; 一样, 添加 &lt;em&gt;@IBAction&lt;/em&gt; 关键字能够让故事板识别到该函数，因此你能够将该函数连接按钮的点击事件。&lt;/p&gt;

&lt;p&gt;尝试连接这些属性和函数！打开 &lt;em&gt;Main.storyboard&lt;/em&gt; ，找到文档大纲，你需要做的是通过按住 &lt;em&gt;CTRL&lt;/em&gt; 键并且拖动左边的 &lt;em&gt;View Controller&lt;/em&gt; 到在视图顶部的标签。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/27.png&quot; alt=&quot;图27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个黑色盒子将会弹出输出列表。选中 timerLabel。这是你之前在 &lt;em&gt;ViewController.swift&lt;/em&gt; 创建的一个 UILabel 对象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/28.png&quot; alt=&quot;图28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为 score label 进行同样的操作。但是连接的对象是 scoreLabel。&lt;/p&gt;

&lt;p&gt;为按钮添加 &lt;em&gt;buttonPressed()&lt;/em&gt; 点击事件，你需要采取反向操作。按住 CTRL 键点击故事板中的按钮拖动连接到左边的文档大纲 &lt;em&gt;View Controller&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/29.png&quot; alt=&quot;图29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，选择&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/30.png&quot; alt=&quot;图30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，尝试运行游戏并且点击几次按钮。因为 &lt;em&gt;buttonPressed()&lt;/em&gt; 函数里的 &lt;em&gt;NSLog&lt;/em&gt; 语句，你每次点击按钮的时候屏幕底部的控制台将会输出一些日志。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/31.png&quot; alt=&quot;图31&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;巧妙地控制标签&lt;/h1&gt;

&lt;p&gt;按钮真正的目的并不是打印日志在控制台，而是每当点击时候改变分数里面的值。首先，你应该学着如何控制标签里面的内容。&lt;/p&gt;

&lt;p&gt;好消息 - 这很简单！替换 &lt;em&gt;buttonPressed()&lt;/em&gt; 函数里面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scoreLabel.text = &quot;Pressed&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，当你运行你的游戏并且点击按钮，屏幕底部的文本将会改变成 “Pressed”。&lt;/p&gt;

&lt;p&gt;为了使用这个技能来让你的分数标签显示正确的分数，你还需要做点东西。&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;分数记录&lt;/h1&gt;

&lt;p&gt;为了记录分数，首先你需要创建一个变量。在类的顶部左括号内两个 &lt;em&gt;@IBOutlet&lt;/em&gt; 定义下面，创建一个属性 &lt;em&gt;count&lt;/em&gt; 来记录分数。=&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var count = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下一步是在 &lt;em&gt;buttonPressed()&lt;/em&gt; 函数顶部进行分数累加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一行的缩写的原意是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;count = count + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，修改代码 _ scoreLabel_ 文本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scoreLabel.text = &quot;Score \n\(count)&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行你的游戏再次测试。当你点击按钮的时候，屏幕的底部标签将会记录你的分数。你的程序已经越来越接近一个可玩的游戏了！&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;倒计时&lt;/h1&gt;

&lt;p&gt;为了这游戏能有走时准确的时钟，你需要创建两个新属性。一个是 &lt;em&gt;int&lt;/em&gt; 类型来记录秒数和一个 &lt;em&gt;NSTimer&lt;/em&gt; 来实现倒计时。&lt;/p&gt;

&lt;p&gt;在 &lt;em&gt;count&lt;/em&gt; 的定义下方加入以下两个变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var seconds = 0
var timer = NSTimer()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了使用这些变量，你需要创建两个函数。第一个是 &lt;em&gt;setupGame()&lt;/em&gt;。在类的底部花括内加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func setupGame()  {
  seconds = 30
  count = 0
 
  timerLabel.text = &quot;Time: \(seconds)&quot;
  scoreLabel.text = &quot;Score: \(count)&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这块代码是在游戏进行中还原所有变量到原始值。如果你没有加入这些代码，秒数会继续递减至0并且分数将会持续一直递增下去。&lt;/p&gt;

&lt;p&gt;下一步还需要为 &lt;em&gt;setupGame()&lt;/em&gt; 函数启动一个定时器。为了实现这点，你需要使用 &lt;em&gt;scheduledTimerWithTimeInterval()&lt;/em&gt; 函数来获得你想要的定时器。在 &lt;em&gt;setupGame()&lt;/em&gt; 加入以下代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: Selector(&quot;subtractTime&quot;), userInfo: nil, repeats: true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，确保你在 &lt;em&gt;viewDidLoad()&lt;/em&gt; 函数里调用了 &lt;em&gt;setupGame()&lt;/em&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setupGame()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下一个方法是 &lt;em&gt;subtractTime()&lt;/em&gt;。你会发现当你使用 &lt;em&gt;setupGame&lt;/em&gt; 里的定时器的时候你需要在选择器中使用这个函数。这就是所涉及道德。这个函数用来递减秒数，更新 &lt;em&gt;timeLabel&lt;/em&gt;，当计时器为0时触发一个警报器。&lt;/p&gt;

&lt;p&gt;你已经知道事情的顺序：递减 &lt;em&gt;seconds&lt;/em&gt;，更新 &lt;em&gt;timerLabel&lt;/em&gt;，并且当秒数为 &lt;em&gt;0&lt;/em&gt; 的时候创建一个 &lt;em&gt;if&lt;/em&gt; 语句。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func subtractTime() {
  seconds--
  timerLabel.text = &quot;Time: \(seconds)&quot;
 
  if(seconds == 0)  {
 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;em&gt;if&lt;/em&gt; 条件语句中第一件要做的事情是停止已经计时为0的计时器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timer.invalidate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译并且运行你的游戏，现在时钟已经会倒计时了!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/32.png&quot; alt=&quot;图32&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;红色警报!&lt;/h1&gt;

&lt;p&gt;下一步，你将会学习如何使用警报。当你完成警报的编程时候，你应该看到的界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/33.png&quot; alt=&quot;图33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是时候干正事了。第一件事创建一个 &lt;em&gt;UIAlertController&lt;/em&gt;。在 &lt;em&gt;if&lt;/em&gt; 判断内的 &lt;em&gt;invalidate()&lt;/em&gt; 语句后面添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let alert = UIAlertController(title: &quot;Time is up!&quot;,
 message: &quot;You scored \(count) points&quot;,
 preferredStyle: UIAlertControllerStyle.Alert)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一行定义了警报的内容。指定了标题，消息，还有显示的风格。&lt;/p&gt;

&lt;p&gt;接着，你需要调整按钮的内容和事件。为了实现这一点，你需要使用 &lt;em&gt;addAction()&lt;/em&gt;。在 alert 的定义下面编写如下代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alert.addAction(UIAlertAction(title: &quot;Play Again&quot;, style: UIAlertActionStyle.Default, handler: {
  action in self.setupGame()
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你仔细阅读这段代码，你将会发现 &lt;em&gt;title&lt;/em&gt; 决定了按钮的显示文字，并且按钮点击会触发 &lt;em&gt;setupGame()&lt;/em&gt; 函数，警报框会消失。&lt;/p&gt;

&lt;p&gt;最后一条代码!这一句是告诉应用跳出一个 &lt;em&gt;UIAlertController&lt;/em&gt;。使用 &lt;em&gt;presentViewController()&lt;/em&gt; 函数。在 &lt;em&gt;alert.addAction(…)&lt;/em&gt; 之后加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;presentViewController(alert, animated: true, completion:nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在运行您的游戏。你能够打败我吗？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d4/34.png&quot; alt=&quot;图34&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;何去何从？&lt;/h1&gt;

&lt;p&gt;到目前为止这边教程系列的&lt;a href=&quot;http://www.raywenderlich.com/wp-content/uploads/2015/09/TapMeFinal.zip&quot;&gt;完整playground文件&lt;/a&gt;。&lt;br /&gt;
点击该系列[下一篇]（敬请期待）教程，你将会学习如何制造一个更有视觉吸引的游戏！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你有问题或者反馈，加入下面的评论系统！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-8&quot;&gt;著作权声明&lt;/h1&gt;

&lt;p&gt;本文译自&lt;a href=&quot;https://www.raywenderlich.com/114262/learn-to-code-ios-apps-with-swift-tutorial-4-your-first-app&quot;&gt;Learn To Code iOS Apps With Swift Tutorial 4: Your First App&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 18:44:22 +0800</pubDate>
        <link>http://jrjian.github.io/2016/03/01/swift-tutorial-4/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2016/03/01/swift-tutorial-4/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>教程</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>学习Swift开发iOS应用教程第三篇「译」</title>
        <description>&lt;p&gt;很高兴，你来到Swift教程系列编写iOS应用第三部分！&lt;/p&gt;

&lt;p&gt;在系列的第一部分，你学会了Swift编程基础知识。学习了变量，if/else语句，循环，可选类型等等。&lt;/p&gt;

&lt;p&gt;在系列的第二部分，你将所学到的技能运用到一个简单的猜数字的游戏中。&lt;/p&gt;

&lt;p&gt;在系列的第三部分，你将会创建一个记录用户名和年龄的命令行应用。&lt;/p&gt;

&lt;p&gt;跟着学习的步伐，这部分你将会学习到Swift关于 &lt;code&gt;Arrays&lt;/code&gt;, &lt;code&gt;Objects&lt;/code&gt;, 和 &lt;code&gt;Classes&lt;/code&gt;的概念。让我们开始吧！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意: 系列的这一部分，您将开发一个命令行的 OS X 应用程序。因此，你需要最低Xcode 6.1版本来完成这个教程。在开始之前请再三确认您的Xcode版本。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;开始&lt;/h1&gt;

&lt;p&gt;打开Xcode并且创建一个playground file,通过点击 &lt;em&gt;Get started with a playground&lt;/em&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/1.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置文件名为 &lt;em&gt;Person&lt;/em&gt;, &lt;em&gt;iOS&lt;/em&gt; 平台，点击下一步。保存文件到你指定的路径。&lt;/p&gt;

&lt;p&gt;删除以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &quot;Hello, playground&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;classes-and-objects&quot;&gt;类和对象（Classes and Objects）&lt;/h1&gt;

&lt;p&gt;一个 &lt;em&gt;class&lt;/em&gt; 就像一张蓝图，描述着一个对象的行为和它能做什么。它确定了该对象有哪些方法和属性。&lt;/p&gt;

&lt;p&gt;在这个项目中，你将会创建一个 &lt;em&gt;Person&lt;/em&gt; 类。然后给该类创建一些方法和类似 name 和 age 的属性，因此它能够为你的程序提供一些服务支持。&lt;/p&gt;

&lt;p&gt;首先，在 playground 中加入类的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person  {
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，给这个类增加一些 &lt;em&gt;properties（属性）&lt;/em&gt;。属性是类的实例所持有的变量属性。例如，每一个人都拥有一个 &lt;em&gt;fist name(名)&lt;/em&gt;, &lt;em&gt;last name(姓)&lt;/em&gt;，和 &lt;em&gt;age(年龄)&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;为类添加属性就是给类创建变量，不同的是它们是添加在类的定义里面。给类添加几个属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person  {
 
  var firstName = &quot;&quot;
  var lastName = &quot;&quot;
  var age = 0
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了属性外，类还拥有 &lt;em&gt;methods（方法或函数）&lt;/em&gt;。方法就是类可以做的一些操作 - 例如，你可能想要添加一个在屏幕打印用户信息的方法 - 事实上，你等会将会干这件事！&lt;/p&gt;

&lt;p&gt;重要的事情先来，这个应用需要用户提供一些信息。复制并且粘贴以下代码在 &lt;em&gt;age&lt;/em&gt; 属性之后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func input() -&amp;gt; String {
  let keyboard = NSFileHandle.fileHandleWithStandardInput()
  let inputData = keyboard.availableData
  let rawString = NSString(data: inputData, encoding:NSUTF8StringEncoding)
  if let string = rawString {
    return string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
  } else {
    return &quot;Invalid input&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法用来接收用户的字符输入。现在不需要理解它的工作原理；在下一章节你将会学习如何编写你自己的函数。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;编写专属函数&lt;/h1&gt;

&lt;p&gt;在这个类中，你需要编写3个 &lt;em&gt;methods(函数)&lt;/em&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;changeFirstName()&lt;/em&gt; 允许用户改变他们的名字&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;enterInfo()&lt;/em&gt; 提示用户输入他们的信息&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;printInfo()&lt;/em&gt; 打印用户信息到控制台&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;开始编写 &lt;em&gt;changeFirstName()&lt;/em&gt; 函数。这个函数接收了一个入参来修改 &lt;em&gt;Person&lt;/em&gt; 的 名字。&lt;/p&gt;

&lt;p&gt;首先你该声明该函数。在 &lt;em&gt;Person&lt;/em&gt; 类里的 &lt;em&gt;input()&lt;/em&gt; 函数后加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func changeFirstName(newFirstName:String)  {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很好！你刚刚完成了你专属函数的第一步。现在，你需要解决这个函数的实现。在花括号内定义一个 &lt;em&gt;String&lt;/em&gt; 类型的变量 &lt;em&gt;newFirstName&lt;/em&gt;。并且将 &lt;em&gt;newFirstName&lt;/em&gt; 赋值到 &lt;em&gt;Persong&lt;/em&gt; 的 &lt;em&gt;first name(名)&lt;/em&gt; 。函数体内应该看到如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;firstName = newFirstName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可在函数内加入任何代码，上面只是个非常简单的例子。&lt;/p&gt;

&lt;p&gt;此时你文件里的代码应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
 
class Person  {
 
  var firstName = &quot;&quot;
  var lastName = &quot;&quot;
  var age = 0
 
  func input() -&amp;gt; String {
    let keyboard = NSFileHandle.fileHandleWithStandardInput()
    let inputData = keyboard.availableData
    let rawString = NSString(data: inputData, encoding:NSUTF8StringEncoding)
    if let string = rawString {
      return string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
    } else {
      return &quot;Invalid input&quot;
    }
  }
 
  func changeFirstName(newFirstName:String) {
    firstName = newFirstName
  }
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我使用你的 &lt;em&gt;class&lt;/em&gt;！&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;类的使用&lt;/h1&gt;

&lt;p&gt;创建一个 &lt;em&gt;Person&lt;/em&gt; 类实例，在 playground 底部加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var newPerson = Person()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你刚刚创建了一个 &lt;em&gt;Person&lt;/em&gt; 类型的 &lt;em&gt;newPerson&lt;/em&gt; 变量并且初始化为 &lt;em&gt;Person&lt;/em&gt; 对象。&lt;/p&gt;

&lt;p&gt;尝试为你的 person 实例设置属性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newPerson.firstName = &quot;Ry&quot;
newPerson.lastName = &quot;Bristow&quot;
newPerson.age = 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果移动你的鼠标到右边的眼睛图标，你将会看到 &lt;em&gt;newPerson&lt;/em&gt; 对象的更新后的属性值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/2.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool，不是吗？你可以使用你写的新方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newPerson.changeFirstName(&quot;Paul&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在你右手边的窗口，你会看到对象关联的 &lt;em&gt;firstName&lt;/em&gt; 属性值已经改成 “Paul”。&lt;/p&gt;

&lt;p&gt;以上是类的基本使用 - 让我们扩展一下。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;更多的函数&lt;/h1&gt;

&lt;p&gt;现在你已经知道如何编写以及使用专属函数，让我继续为项目添加函数。第一个函数 &lt;em&gt;enterInfo()&lt;/em&gt;。跟之前一页，首先声明函数头。在 &lt;em&gt;Person&lt;/em&gt; 类的 &lt;em&gt;changeFirstName()&lt;/em&gt; 函数之后添加代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func enterInfo()  {
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，我们来编写函数体的实现。为了让用户输入你所期望的内容，你需要告诉用户输入的内容是什么。让我们使用 &lt;em&gt;print()&lt;/em&gt; 语句实现这一点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;What is the first name?&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这条语句需要在函数的花括号内。叫做函数体。紧接着你需要将 &lt;em&gt;input()&lt;/em&gt; 函数接收的值赋给 &lt;em&gt;firstName&lt;/em&gt; 变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;firstName = input()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该函数等会还有一些代码。现在，我们先聚焦到 &lt;em&gt;printInfo()&lt;/em&gt; 函数。该函数的目的是打印关于 &lt;em&gt;Person&lt;/em&gt; 对象的信息。它应该是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func printInfo()  {
  print(&quot;First Name: \(firstName)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恭喜，你完成了类的原型设计(you have finished prototyping your class)！尽量在 Playground 文件中进行原型设计是非常好的，因为在创建一个完整的应用前它可以让你简单快速的获取经验值。&lt;/p&gt;

&lt;p&gt;此刻的&lt;a href=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2015/09/Person.playground.zip&quot;&gt;Person.playground&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;现在让我们将这些代码放入命令行工具！&lt;/p&gt;

&lt;h1 id=&quot;swift&quot;&gt;在Swift文件里创建一个类&lt;/h1&gt;

&lt;p&gt;打开Xcode点击 &lt;em&gt;Create a new Xcode project&lt;/em&gt; 按钮。如果你不小心关闭了 “Welcome to Xcode” 窗口或者已经打开了一个Xcode项目，你可以点击顶部菜单File选中 &lt;em&gt;New &amp;gt; Project&lt;/em&gt; 新建个项目。&lt;/p&gt;

&lt;p&gt;然后，在OS X章节中，选中 &lt;em&gt;Application&amp;gt;Command Line Tool&lt;/em&gt; 点击下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/3.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面的屏幕中，根据指示填写表格：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Name: PeopleDatabase&lt;/li&gt;
  &lt;li&gt;Organization Name: 选填。&lt;/li&gt;
  &lt;li&gt;Organization Identifier: 输入 com.yourname, 例如 com.rybristow&lt;/li&gt;
  &lt;li&gt;Language: Swift&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/4.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，点击 &lt;em&gt;File\New\File&lt;/em&gt; 然后选择 &lt;em&gt;OS X\Source\Swift File&lt;/em&gt; 模板，接着点击下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/5.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文件命名 &lt;em&gt;Person.swift&lt;/em&gt; 然后点击 &lt;em&gt;Create&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;在 Person.swift 中，复制 Playground 文件中的 Person class（不要复制了test代码）。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
class Person  {
 
  var firstName = &quot;&quot;
  var lastName = &quot;&quot;
  var age = 0
 
  func input() -&amp;gt; String {
    let keyboard = NSFileHandle.fileHandleWithStandardInput()
    let inputData = keyboard.availableData
    let rawString = NSString(data: inputData, encoding:NSUTF8StringEncoding)
    if let string = rawString {
      return string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
    } else {
      return &quot;Invalid input&quot;
    }
  }
 
  func changeFirstName(newFirstName:String) {
    firstName = newFirstName
  }
 
  func enterInfo()  {
    print(&quot;What is the first name?&quot;)
    firstName = input()
  }
 
  func printInfo()  {
    print(&quot;First Name: \(firstName)&quot;)
  }
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在你进入 &lt;em&gt;main.swift&lt;/em&gt; 文件编写前，你应该完成 &lt;em&gt;Person&lt;/em&gt; 类的函数。在 &lt;em&gt;Person&lt;/em&gt; 类的 &lt;em&gt;enterInfo()&lt;/em&gt; 函数里添加提示和 input 语句，然后在 &lt;em&gt;printInfo()&lt;/em&gt;  函数里添加打印这两条信息的功能。这是 &lt;em&gt;enterInfo()&lt;/em&gt; 的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func enterInfo()  {
  print(&quot;What is the first name?&quot;)
  firstName = input()
  print(&quot;What is \(firstName)&#39;s last name?&quot;)
  lastName = input()
  print(&quot;How old is \(firstName) \(lastName)&quot;)
  let userInput = Int(input())
  if let number = userInput {
    age = number
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最好不要直接复制粘贴我们提供的代码。花点时间思考和测试下不同的功能。上面的代码块中每个变量都有附带着 &lt;em&gt;print()&lt;/em&gt; 和 &lt;em&gt;input()&lt;/em&gt; 语句，除了 &lt;em&gt;age&lt;/em&gt; 变量复杂一点。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Int&lt;/em&gt; 类型的 &lt;em&gt;age&lt;/em&gt; 变量不能存放 &lt;em&gt;String&lt;/em&gt; 类型的数据，因此需要 &lt;em&gt;toInt()&lt;/em&gt; 函数进行类型转换。如果这看上去很熟悉，那是因为你之前已经用过该函数！记住，该类型转换需要使用 &lt;em&gt;if let&lt;/em&gt; 语句来判断 &lt;em&gt;Int&lt;/em&gt; 类型转换是否成功。&lt;/p&gt;

&lt;p&gt;现在，尝试着自己更新 &lt;em&gt;printInfo()&lt;/em&gt; 函数。尝试输出一些内容类似：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;John Smith is 30 years old
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你感到困惑，这里提供了一种解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func printInfo()  {
  print(&quot;\(firstName) \(lastName) is \(age) years old&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想再次确认你的工作内容，以下是这章节完整的代码：&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
class Person  {
 
  var firstName = &quot;&quot;
  var lastName = &quot;&quot;
  var age = 0
 
  func input() -&amp;gt; String {
    let keyboard = NSFileHandle.fileHandleWithStandardInput()
    let inputData = keyboard.availableData
    let rawString = NSString(data: inputData, encoding:NSUTF8StringEncoding)
    if let string = rawString {
      return string.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
    } else {
      return &quot;Invalid input&quot;
    }
  }
 
  func changeFirstName(newFirstName:String) {
    firstName = newFirstName
  }
 
  func enterInfo()  {
    print(&quot;What is the first name?&quot;)
    firstName = input()
    print(&quot;What is \(firstName)&#39;s last name?&quot;)
    lastName = input()
    print(&quot;How old is \(firstName) \(lastName)&quot;)
    let userInput = Int(input())
    if let number = userInput {
      age = number
    }
  }
 
  func printInfo()  {
    print(&quot;\(firstName) \(lastName) is \(age) years old&quot;)
  }
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;class&quot;&gt;测试你的 &lt;em&gt;Class&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;在项目导航控制器点击 &lt;em&gt;main.swift&lt;/em&gt; 文件，并且替换成以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
var newPerson = Person()
newPerson.enterInfo()
newPerson.printInfo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点击 run 按钮检验你的程序！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;What is the first name?
Ry
What is Ry&#39;s last name?
Bristow
How old is Ry Bristow
18
Ry Bristow is 18 years old
Program ended with exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恭喜你 - 您创建了第一个 class!&lt;/p&gt;

&lt;h1 id=&quot;repeat-while-the-repeat-while-loop&quot;&gt;Repeat While 循环语句(The Repeat While Loop)&lt;/h1&gt;

&lt;p&gt;这篇文章，需要用到上一篇教程的辅助函数，因此先下载&lt;a href=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2014/10/helpers.swift_.zip&quot;&gt;here&lt;/a&gt;。拖动 &lt;em&gt;helpers.swift&lt;/em&gt; 文件到你的 Xcode 工程里，确保弹出的选择框选中的是 &lt;em&gt;copy the items&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;允许用户输入多次个人信息是非常好的体验。要做到这一点，让我们试用一个新的循环。&lt;/p&gt;

&lt;p&gt;这个循环叫 &lt;em&gt;repeat…while&lt;/em&gt; 循环。 &lt;em&gt;repeat while&lt;/em&gt; 循环也叫做 &lt;em&gt;do while&lt;/em&gt; 循环。为了避免跟Swift其他框架冲突，Swift2.0 将它重命名为 &lt;em&gt;repeat while&lt;/em&gt; 循环。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;repeat while&lt;/em&gt; 循环不同于 &lt;em&gt;while&lt;/em&gt; 循环，在判断条件语句前，无论如何都会先执行一次代码，然后在判断是否需要循环下一次。&lt;/p&gt;

&lt;p&gt;首先，在 &lt;em&gt;import&lt;/em&gt; 语句下面创建一个String类型变量 &lt;em&gt;response&lt;/em&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var response: String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，使用 &lt;em&gt;do…while&lt;/em&gt; 循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repeat  {
 
}  while(response == &quot;y&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，剪切循环后面的所有代码放入循环体内。&lt;/p&gt;

&lt;p&gt;为了使用户可以控制循环的次数，你需要提示用户是否需要继续，使用 &lt;em&gt;response&lt;/em&gt; 变量接收用户的输入。在 &lt;em&gt;do…while&lt;/em&gt; 函数体右花括号之前加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Do you want to enter another name? (y/n)&quot;)
response = input()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，用户可以告诉程序是否继续输入通过 &lt;em&gt;y(是)&lt;/em&gt; 或 &lt;em&gt;n(不)&lt;/em&gt; 字符（从技术上来看，任何输入都是退出循环除了 &lt;em&gt;y&lt;/em&gt; ）。 &lt;/p&gt;

&lt;p&gt;如果你想再次确认你的工作内容，以下是这章节完整的代码：&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
var response: String
 
repeat {
  var newPerson = Person()
  newPerson.enterInfo()
  newPerson.printInfo()
 
  print(&quot;Do you want to enter another name? (y/n)&quot;)
  response = input()
 
} while(response == &quot;y&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点击 run 按钮再次运行你的程序。尝试多次输入 &lt;em&gt;y&lt;/em&gt; 进行多个用户信息的输入，最后输入 &lt;em&gt;n&lt;/em&gt; 退出循环。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;What is the first name?
Ry
What is Ry&#39;s last name?
Bristow
How old is Ry Bristow
18
Ry Bristow is 18 years  old
Do you want to enter another name? (y/n)
y
What is the first name?
Ray
What is Ray&#39;s last name?
Wenderlich
How old is Ray Wenderlich
34
Ray Wenderlich is 34 years  old
Do you want to enter another name? (y/n)
n
Program ended with exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;arrays&quot;&gt;数组(Arrays)&lt;/h1&gt;

&lt;p&gt;每一次执行循环，程序都会忘记上次循环执行的信息。数组对象能够存放一组对象列表，并且允许你去访问它们。定义一组数组如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var response:String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var people: [Person] = []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码创建了一个存放 &lt;em&gt;Person&lt;/em&gt; 类型的 &lt;em&gt;people&lt;/em&gt; 数组变量。通过给类型加上 &lt;em&gt;[]&lt;/em&gt; 中括号，编译器就知道该变量的类型是数组。通过设置等于 &lt;em&gt;[]&lt;/em&gt;，代表创建了一个什么变量都没存放的空数组。&lt;/p&gt;

&lt;p&gt;为了给数组添加对象，你需要用 &lt;em&gt;append()&lt;/em&gt; 函数。让我们试一试。在循环内 &lt;em&gt;enterInfo()&lt;/em&gt; 和 &lt;em&gt;printInfo()&lt;/em&gt; 函数之间插入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;people.append(newPerson)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，每通过提示用户一次信息都会创建一个 &lt;em&gt;newPerson&lt;/em&gt; 对象，接着放入数组里。为了完成项目，在循环下面添加一些实用的 &lt;em&gt;print()&lt;/em&gt; 语句。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Number of people in the database: \(people.count)&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这行代码通过计算 &lt;em&gt;people&lt;/em&gt; 数组的长度告诉用户他往数据库里输入了几个用户信息。&lt;/p&gt;

&lt;p&gt;再一次运行应用，输入两次用户信息。当结束的时候，你将会看到以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number of people in the database: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;forfor-loops&quot;&gt;For循环(For Loops)&lt;/h1&gt;

&lt;p&gt;最后一个循环语句：&lt;em&gt;for&lt;/em&gt; 循环。该循环功能是遍历数组里的所有元素。如果你想知道数据库里所有的信息，你就会用到 &lt;em&gt;for&lt;/em&gt; 循环。&lt;/p&gt;

&lt;p&gt;让我们试一试。在 &lt;em&gt;main.swift&lt;/em&gt; 文件最底部加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for onePerson in people  {
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个循环将要做的内容是遍历数组里面的所有 &lt;em&gt;people&lt;/em&gt; 对象。每完成一次循环，&lt;em&gt;index&lt;/em&gt; 索引移动到下一个被遍历的对象并且赋值到 &lt;em&gt;onePerson&lt;/em&gt; 对象，该循环会等所有对象都被遍历完成才会退出。&lt;/p&gt;

&lt;p&gt;在循环体内的加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onePerson.printInfo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这行代码将会在用户输入完数据后，打印 &lt;em&gt;people&lt;/em&gt; 数组里面的每一个 &lt;em&gt;Person&lt;/em&gt; 对象的信息。&lt;/p&gt;

&lt;p&gt;干得好！下面的是你今天完成的所有 &lt;em&gt;main.swift&lt;/em&gt; 代码内容。如果你有一些不能解决的问题，它会帮到你。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
var response: String
var people: [Person] = []
 
repeat {
  var newPerson = Person()
  newPerson.enterInfo()
  people.append(newPerson)
  newPerson.printInfo()
 
  print(&quot;Do you want to enter another name? (y/n)&quot;)
  response = input()
 
} while(response == &quot;y&quot;)
 
print(&quot;Number of people in the database: \(people.count)&quot;)
 
for onePerson in people  {
  onePerson.printInfo()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成 - 编译运行你的最终版本！已经运行的应用程序的输出结果应该类似如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d3/6.png&quot; alt=&quot;图6&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;何去何从？&lt;/h1&gt;

&lt;p&gt;到目前为止这边教程系列的&lt;a href=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2015/09/PeopleDatabase.zip&quot;&gt;完整playground文件&lt;/a&gt;。&lt;br /&gt;
点击该系列[下一篇]（敬请期待）教程，你将会制作你的第一个 &lt;em&gt;iPhone&lt;/em&gt; 游戏！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你有问题或者反馈，加入下面的评论系统！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-5&quot;&gt;著作权声明&lt;/h1&gt;

&lt;p&gt;本文译自&lt;a href=&quot;http://www.raywenderlich.com/114234/learn-to-code-ios-apps-with-swift-tutorial-3-arrays-objects-and-classes&quot;&gt;Learn to Code iOS Apps with Swift Tutorial 3: Arrays, Objects, and Classes&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 18:44:22 +0800</pubDate>
        <link>http://jrjian.github.io/2016/02/29/swift-tutorial-3/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2016/02/29/swift-tutorial-3/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>教程</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>学习Swift开发iOS应用教程第二篇「译」</title>
        <description>&lt;p&gt;很高兴，你来到Swift教程系列编写iOS应用第二部分！&lt;/p&gt;

&lt;p&gt;在系列的第一部分，你学会了Swift编程基础知识。学习了变量，if/else语句，循环，可选类型等等。&lt;/p&gt;

&lt;p&gt;在系列的第二部分，你将会学到新的技能并且运用到一个猜数字的游戏中！&lt;/p&gt;

&lt;p&gt;你将会使用到第一部分学习到的大部分知识，所以建议先复习下上一篇教程的完整代码finished playground file 。&lt;/p&gt;

&lt;p&gt;准备好进行猜谜！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意: 系列的这一部分，您将开发一个命令行的 OS X 应用程序。因此，你需要最低Xcode 6.1版本来完成这个教程。在开始之前请再三确认您的Xcode版本。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;原型编写&lt;/h1&gt;

&lt;p&gt;在一部分，你将会再现一个经典游戏“Higher or Lower”。电脑将会随机生成一个保密的数字并且引导你来猜测这个数。在每一轮猜测后，计算机会告诉你猜测的数字比保密的数字大或者小直到你猜对为止。同时游戏会记录你猜测的数次。&lt;/p&gt;

&lt;p&gt;首先，在你创建命令行工具应用程序前，先使用playground设计个原型。打开Xcode创建一个playground文件，点击Get started with a playground:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/1.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟上一篇教程中一样，设置文件名为 &lt;em&gt;MyPlayground，iOS&lt;/em&gt; 平台，然后点击下一步。保存工程文件到你指定的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/2.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;删除顶部的注释内容和String的定义，留下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，复制以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func randomIntBetween(low:Int, high:Int) -&amp;gt; Int {
  let range = high - (low - 1)
  return (Int(arc4random()) % range) + (low - 1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你不需要理解以上全部内容，但是你要知道这个函数是返回一个low和high之间的一个随机数。最后，你会编写你自己的函数，你可以使用这些函数就像第一篇教程使用Int()函数一样。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;是时候表演真正的技术了！&lt;/h1&gt;

&lt;p&gt;首先要做的事情是告诉程序设置一个谜底数字。提供给您的randomIntBetween方法将派上用场。在playground底部编写以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let answer = randomIntBetween(1, high: 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你刚刚定义了一个整型常量answer并且初始化为一个1到100之间的随机数。如果你重新编写不同的代码那么返回的结果每次都不想同（这将会使游戏非常的乏味）。&lt;/p&gt;

&lt;p&gt;现在，玩家需要知道游戏规则。你能够使用print()语句打印规则。编写下面这句代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Enter a number between 1 and 100.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不幸的是，playgrounds不支持用户输入。但是命令行工具支持。现在，创建一个新的整型变量用来表示猜测的数字，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var guess = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是时候使用更多第一篇所学到的知识了。你需要一些条件语句告诉玩家他们猜测的数字大于，小于还是等于谜底数字。&lt;/p&gt;

&lt;p&gt;去吧，你自己尝试下。不要害怕查阅第一篇教程的知识或者你已经创建的playground文件。如果你遇到困难，下面是解决方案。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(guess &amp;gt; answer) {
  print(&quot;Lower!&quot;)
} else if(guess &amp;lt; answer) {
  print(&quot;Higher!&quot;)
} else {
  print(&quot;Correct! The answer was \(answer).&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-2&quot;&gt;创建一款命令行应用程序&lt;/h1&gt;

&lt;p&gt;Playgrounds能够很好的测试代码片段。但是它不支持用户输入或者用来制作应用程序。&lt;/p&gt;

&lt;p&gt;要做到这一点，你需要在Xcode中创建不同类型的项目，你将会使用OS X(MAC系统)命令行工具，因为这是最简单的开始方式。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;记住 - 这些教程的内容需要Xcode6.1(等于)之后的版本。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;打开Xcode点击Create a new Xcode project按钮。如果你不小心关闭了 “Welcome to Xcode” 窗口或者已经打开了一个Xcode项目，你可以点击顶部菜单File选中New&amp;gt;Project新建个项目。&lt;/p&gt;

&lt;p&gt;然后，在OS X章节中，选中Application&amp;gt;Command Line Tool点击下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/3.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下面的屏幕中，根据指示填写表格：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Name: My First Project&lt;/li&gt;
  &lt;li&gt;Organization Name: 选填。&lt;/li&gt;
  &lt;li&gt;Organization Identifier: 输入 com.yourname, 例如 com.rybristow&lt;/li&gt;
  &lt;li&gt;Language: Swift&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/4.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击下一步。选择一个保存工程的路径。我建议放在跟第一篇教程中的Playground文件同一个文件夹目录。点击Create之后Xcode会设置好的项目并且打开。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;运行应用程序&lt;/h1&gt;

&lt;p&gt;跟第一次启动Playground文件一样，Xcode已经预先在文件中编写了一些代码。尝试点击屏幕左上方Run按钮。它看起来像一个三角形”Play”按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/5.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你点击了这个按钮。Xcode会运行你的App。注意屏幕底部。有一个横跨底部的框。在右半部分，你应该能看到程序打印的Hello, World!文本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/6.png&quot; alt=&quot;图6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: 如果你觉得屏幕比较窄, 你可能不能够一次查看双方底部的框。你可能看到这样的:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/7.png&quot; alt=&quot;图7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果出现这种情况, 在方框的右下角有几个按钮. 点击其中一个右半部有阴影的按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/8.png&quot; alt=&quot;图8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在进入编写第一个应用程序之前，简单的介绍Xcode的一些特性。&lt;/p&gt;

&lt;h1 id=&quot;xcode&quot;&gt;Xcode&lt;/h1&gt;
&lt;p&gt;Xcode的左窗格中显示的是项目的一部分的文件列表。这些看见的文件都是项目模板为提供使用自动生成的。找到 My First Project Folder 中的main.swift文件，点击它之后将会出现在编辑器中，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/9.png&quot; alt=&quot;图9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;编辑器界面看起来应该是下面这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/10.png&quot; alt=&quot;图10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是否似曾相识的赶脚。文件最后一行代码： print(“Hello, World!”)在第一篇教程中你编写过。然而，事情往往不总是相同。当你在Playground中编程，屏幕右边会持续跟踪你编写的每一个变量值。Swift格式的文件并不会这样做，它实际上是用来创建应用程序的。&lt;/p&gt;

&lt;p&gt;如果你使用Objective-C语言来编写App，会有更多的这样的基本文件。并且代码里会定义了一个必要的main函数入口。Swift不再需要这个函数，取而代之项目需要main.swift文件，所以要确保你不尝试重命名此文件。&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;从原型到项目&lt;/h1&gt;

&lt;p&gt;首先，删除整行print()语句，保留顶部的注释以及 &lt;code&gt;import Foundation&lt;/code&gt; 这一行。&lt;/p&gt;

&lt;p&gt;现在，你可以从playground拉取一些代码。复制playground里面的代码然后粘贴到main.swift文件的import Foundation代码下面。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let answer = randomIntBetween(0, high: 100)
 
print(&quot;Enter a number between 1 and 100.&quot;)
 
var guess = 7
 
if(guess &amp;gt; answer) {
  print(&quot;Lower!&quot;)
} else if(guess &amp;lt; answer) {
  print(&quot;Higher!&quot;)
} else {
  print(&quot;Correct! The answer was \(answer).&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;糟糕！代码报红。不用担心，只不过是因为计算机找不到randomIntBetween()函数。解决办法是下载已经写好的&lt;a href=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2014/10/helpers.swift_.zip&quot;&gt;辅助文件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;要使用该新文件，首先下载，然后拖拽下载的文件至Xcode工程My First Project文件里面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/11.png&quot; alt=&quot;图11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确保你勾选了 &lt;em&gt;Copy items if needed&lt;/em&gt; 选项。这样的话，如果原始文件的位置移动了，您的项目仍然拥有它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/12.png&quot; alt=&quot;图12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存项目并且错误应该会消失。&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;支持玩家输入&lt;/h1&gt;

&lt;p&gt;让我们说实话，如果你每猜一次数字需要手动重启游戏应用那是很没劲的。你可以通过允许玩家输入来解决这个问题。helpers.swift文件提供了该方法方便你调用。&lt;br /&gt;
在main.swift中以下两段代码间插入代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Enter a number between 1 and 100.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var guess = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此你需要一些空间来编写代码，删除下面这行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var guess = 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先你需要创建一个常量来保存玩家的输入。编写以下代码替换刚刚删除的代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let userInput = input()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你刚刚创建了一个String类型变量userInput来存储玩家的键盘输入。非常好，但是你不能够使用String类型跟Int类型进行对比。为了达到效果，首先你得将输入的String类型转化成Int类型。看看你能否通过第一部分学习的知识来完成这项挑战。如果你有困难，我已经为了提供了解决方案。&lt;br /&gt;
提示：你需要使用到if let语句。&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let inputAsInt = Int(userInput)
if let guess = inputAsInt  {
 
}  else  {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦玩家输入的数据类型是整型，程序就会执行if let紧跟着的第一个花括内的代码块，花括号内的代码应该加入之前学到if/else语句。你的代码应该是下面这样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
let answer = randomIntBetween(1, 100)
 
print(&quot;Enter a number between 1 and 100.&quot;)
 
let userInput = input()
let inputAsInt = userInput.toInt()
 
if let guess = inputAsInt {
  if(guess &amp;gt; answer) {
    print(&quot;Lower!&quot;)
  } else if(guess &amp;lt; answer) {
    print(&quot;Higher!&quot;)
  } else {
    print(&quot;Correct! The answer was \(answer).&quot;)
  }
}  else  {
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你应该提示玩家如果玩家输入的内容不正确。像这样子：在if let语句的else代码块中添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Invalid input! Please enter a number.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请点击运行按钮来运行你的游戏。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d2/13.png&quot; alt=&quot;图13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;非常棒！但是好像只猜一次就想取得胜利有些难。&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;完善游戏&lt;/h1&gt;

&lt;p&gt;你的游戏快完成了！你还需要做的是编写更多的代码完善你的第一个Swift游戏。目前这个游戏只允许玩家猜一次。你希望游戏能让玩家猜测多次直到玩家取得胜利。为了实现这功能，你需要编写一个简单的while循环并且告诉计算机何时退出该循环。在你的程序最下面添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while(true)  {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;剪切所有代码除了常量answer那一行然后粘贴到while循环体内。&lt;br /&gt;
你的代码应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
let answer = randomIntBetween(0, high: 100)
var turn = 1
 
while(true) {
  print(&quot;Guess #\(turn): Enter a number between 1 and 100.&quot;)
 
  let userInput = input()
  let inputAsInt = Int(userInput)
  if let guess = inputAsInt  {
    if(guess &amp;gt; answer) {
      print(&quot;Lower!&quot;)
    } else if(guess &amp;lt; answer) {
      print(&quot;Higher!&quot;)
    } else {
      print(&quot;Correct! The answer was \(answer).&quot;)
      break
    }
  }  else  {
    print(&quot;Invalid input! Please enter a number.&quot;)
    continue
  }
  turn = turn + 1
}
 
print(&quot;It took you \(turn) tries.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行游戏你将会发现该游戏无法停止。(除非你点击了停止运行按钮)你需要实现一个结束游戏的规则。这需要用到在第一部分所学的break语句。&lt;br /&gt;
应该在if/else语句中else代码块内加入break语句；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else {
  print(&quot;Correct! The answer was \(answer).&quot;)
  break
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当玩家输入正确的答案程序将会退出while循环。&lt;br /&gt;
最后但不是最不重要的一点,你需要记录玩家总共猜测的次数。&lt;br /&gt;
在while循环之前创建一个变量turn初始化为1。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var turn = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在需要调整print()语句打印玩家当前第几轮猜测。代码应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Guess #\(turn): Enter a number between 1 and 100.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;增长变量turn的代码最好位置是放在while循环的底部。在最后的一个右花括号里面加入这行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;turn = turn + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，在while循环之后加入print()语句来告诉用户猜中结果一共花了几次尝试。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;It took you \(turn) tries.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一个建议在合适的地方加入continue语句告诉玩家的输入不正确。这样一来，玩家就不会不知道发生了什么。else语句是紧跟if/else语句的，所以代码应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;} else  {
  print(&quot;Invalid input! Please enter a number.&quot;)
  continue
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你的完整代码应该看起来像：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
 
let answer = randomIntBetween(0, 100)
var turn = 1
 
while(true)  {
 
  print(&quot;Guess #\(turn): Enter a number between 1 and 100.&quot;)
 
  let userInput = input()
 
  let inputAsInt = userInput.toInt()
  if let guess = inputAsInt  {
 
    if(guess &amp;gt; answer) {
      print(&quot;Lower!&quot;)
    } else if(guess &amp;lt; answer) {
      print(&quot;Higher!&quot;)
    } else {
      print(&quot;Correct! The answer was \(answer).&quot;)
      break
    }
 
  } else  {
    print(&quot;Invalid input! Please enter a number.&quot;)
    continue
  }
 
  turn = turn + 1
 
}
 
print(&quot;It took you \(turn) tries.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;干得好！运行并享受你的游戏。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Guess #1: Enter a number between 1 and 100.
10
Higher!
Guess #2: Enter a number between 1 and 100.
50
Higher!
Guess #3: Enter a number between 1 and 100.
80
Lower!
Guess #4: Enter a number between 1 and 100.
60
Higher!
Guess #5: Enter a number between 1 and 100.
70
Higher!
Guess #6: Enter a number between 1 and 100.
75
Lower!
Guess #7: Enter a number between 1 and 100.
73
Correct! The answer was 73.
It took you 7 tries.
Program ended with exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-7&quot;&gt;何去何从？&lt;/h1&gt;

&lt;p&gt;到目前为止这边教程系列的&lt;a href=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2015/09/MyFirstProject.zip&quot;&gt;完整playground文件&lt;/a&gt;。&lt;br /&gt;
点击该系列&lt;a href=&quot;/2016/02/29/swift-tutorial-3/&quot;&gt;下一篇&lt;/a&gt;教程，你将会学到更多的Swift知识包括对象和类的使用！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你有问题或者反馈，加入下面的评论系统！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-8&quot;&gt;著作权声明&lt;/h1&gt;

&lt;p&gt;本文译自&lt;a href=&quot;http://www.raywenderlich.com/114173/learn-to-code-ios-apps-with-swift-tutorial-2-your-first-project&quot;&gt;Learn to Code iOS Apps with Swift Tutorial 2: Your first project&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Feb 2016 19:49:33 +0800</pubDate>
        <link>http://jrjian.github.io/2016/02/28/swift-tutorial-2/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2016/02/28/swift-tutorial-2/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>教程</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>学习Swift开发iOS应用教程第一篇「译」</title>
        <description>&lt;p&gt;你是否有想过自己创建一个iPhone或者iPad App是多么帅气的事情?&lt;/p&gt;

&lt;p&gt;此时不学更待何时?&lt;/p&gt;

&lt;p&gt;这是一个完全的iOS初级开发者的系列教程，它将会通过各种基础知识(类似开始Swift编程主题或制作一个命令行应用)来一步步引导你开发一个具有丰富的用户界面的iOS应用程序。&lt;/p&gt;

&lt;p&gt;iOS应用开发者是学无止尽的。这次的Swift系列教程你将会学习到Swift开发的基础知识！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：如果你是个编程初学者，这个教程为你而打造！如果你已经有一些编程经验并且想要更快的学习，可以查阅本系列教程。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;开始&lt;/h1&gt;

&lt;p&gt;第一步下载Xcode - 你编写代码的地方。你能够在Mac 的 AppStore中&lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;免费下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/1.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确保你的Xcode是最新版本 - 必需是Xcode6或者更新的版本&lt;/p&gt;

&lt;p&gt;一旦你安装了Xcode，打开Xcode并且点击 &lt;em&gt;Get started with a playground&lt;/em&gt; 按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/2.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：如果你没看到 &lt;em&gt;Welcome to Xcode&lt;/em&gt; 窗口，点击 &lt;em&gt;Window\Welcome to Xcode&lt;/em&gt; 打开它。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Playground是一个简单方式来玩耍Swift。&lt;/p&gt;

&lt;p&gt;运行一个playground程序跟iPhone程序是不同的，然而重要的是可以帮你理解Swift的基础。不要担心，很快你将会创建你自己的iPhone应用程序。&lt;/p&gt;

&lt;p&gt;设置名字：&lt;em&gt;MyPlayground&lt;/em&gt; ，平台选择 &lt;em&gt;iOS&lt;/em&gt; ，然后点击下一步，保存playground项目到你想要存放的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/3.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;playgrounds&quot;&gt;Playgrounds介绍&lt;/h1&gt;

&lt;p&gt;你将会看到创建的playground里面已经存在3行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Playground - noun: a place where people can play

import UIKit

var str = &quot;Hello, playground&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是playground代码的每一行解析。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Playground - noun: a place where people can play
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行，开头是两个正斜杠，代表一行注释。&lt;br /&gt;
这行注释是为你准备的或者说是给其他开发者看的。它并没有影响你的代码功能。把它想成”给你的代码加注释的一种方式”。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二行代码 &lt;code&gt;import UIKit&lt;/code&gt; ，把它想成”聪明的苹果开发员写的一些代码”。你现在所需要知道的是你需要这行代码才能让你的代码工作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &quot;Hello, playground&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三行代码你应该需要聚焦一下。&lt;br /&gt;
这行代码创建了一个 &lt;em&gt;str&lt;/em&gt; 变量并且持有值”Hello, playground”。在窗口的右边，Xcode会持续跟踪这个 &lt;em&gt;str&lt;/em&gt; 变量的持有值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/4.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;尝试”Hello, playground”改成”Look what I can do!”，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str = &quot;Look what I can do!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你能看到窗口右边的值发生了改变了吗？恭喜你，你刚刚编程了!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/5.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;专属计算器&lt;/h1&gt;

&lt;p&gt;让我们看看你还能做啥。在文件底部，尝试编一条基本运算表达式 &lt;em&gt;2+2&lt;/em&gt; 然后键入回车键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2+2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Playground将会把答案显示在窗口的右边：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/6.png&quot; alt=&quot;图6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真酷，不是吗？你还可以编写其他的数学表达式。&lt;/p&gt;

&lt;p&gt;挑战：快速通过Playgrounds告诉我 &lt;em&gt;123 * 456&lt;/em&gt; 的结果是什么！&lt;/p&gt;

&lt;p&gt;解决方案：&lt;br /&gt;
在playground编写以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;123*456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在窗口右边的答案如下：&lt;br /&gt;
&lt;em&gt;56,088&lt;/em&gt;&lt;br /&gt;
你真是个数学天才！&lt;/p&gt;

&lt;p&gt;把playground当作一个计算器是非常棒的，现在我们继续编写更多的代码！删除所有的代码除了 &lt;code&gt;import UIKit&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;极其重要的是如果你删除这行代码Playground将不会工作。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;变量&lt;/h1&gt;

&lt;p&gt;接下来，是时候来玩玩变量(variables)了。&lt;br /&gt;
变量是用来存储值的。当你创建了一个变量，应该使用如下句法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var yourVariableName: yourType = yourInitialValue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下命名是可替代的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;yourVariableName:可以定义你想要的变量名字，比如str或者age。&lt;/li&gt;
  &lt;li&gt;yourType:变量的类型，比如String或Int。更多的类型在下面会讲解到。&lt;/li&gt;
  &lt;li&gt;yourInitialValue：初始化的默认值，比如”Look what I can do!”或者18。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尝试写个例子！添加以下代码到你的playground底部：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var str: String = &quot;Look what I can do!&quot;
var age: Int = 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行代码创建了一个 &lt;em&gt;String&lt;/em&gt; 类型的变量 &lt;em&gt;str&lt;/em&gt; ，并且设置了个初始值为 “Look what I can do!”&lt;br /&gt;
第二行代码创建了一个 &lt;em&gt;Int&lt;/em&gt; 类型的变量 &lt;em&gt;age&lt;/em&gt;，初始值为18。&lt;/p&gt;

&lt;p&gt;你学了如何创建一个变量，但是你可能想知道 &lt;em&gt;String&lt;/em&gt; 跟 &lt;em&gt;Int&lt;/em&gt; 类型有什么不同，并且还有什么其它的类型。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;类型&lt;/h1&gt;

&lt;p&gt;Swift中的一些基本类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Int - 所有的数字或者整数&lt;/li&gt;
  &lt;li&gt;Double - 浮点数&lt;/li&gt;
  &lt;li&gt;Bool - true或者false两个值&lt;/li&gt;
  &lt;li&gt;String - “string”字符或者文字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用这些数据类型练习。在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var luckyNumber: Int = 7
var costOfCandy: Double = 1.25
var hungry: Bool = true
var name: String = &quot;Ryland&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意playground窗口的右边区域会持续跟踪每一个变量的值。现在，尝试改变字符变量 &lt;em&gt;name&lt;/em&gt; 的值。&lt;br /&gt;
在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name = &quot;Ry&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一行代码不需要使用关键字 &lt;em&gt;var&lt;/em&gt; 或者：&lt;em&gt;String&lt;/em&gt; ，因为变量已经创建过了。你需要做的只是改变它存储的值。&lt;/p&gt;

&lt;p&gt;挑战：尝试一下。在代码底部，创建一个变量来表达你喜欢的视频游戏。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var favoriteGame: String = &quot;超级马里奥&quot;
favoriteGame = &quot;宠物小精灵。&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-4&quot;&gt;常量&lt;/h1&gt;

&lt;p&gt;一些特殊的变量类型叫常量。&lt;/p&gt;

&lt;p&gt;不再是用 &lt;em&gt;var&lt;/em&gt; 关键字定义，而是 &lt;em&gt;let&lt;/em&gt; 。它使定义的变量不可变，或者说不能够修改。&lt;br /&gt;
尽可能的，你应该使用 &lt;em&gt;let&lt;/em&gt; 来替代 &lt;em&gt;var&lt;/em&gt; 它能使你的程序跑的更快，因为编译器不需要计算值的改变。任何数据类型都能够被定义成常量，如同任何数据类型都能够被定义成变量一样。&lt;/p&gt;

&lt;p&gt;在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let life: Int = 42
let pi: Double = 3.14
let canTouchThis: Bool = false
let captain: String = &quot;Kirk&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尝试给 &lt;em&gt;captain&lt;/em&gt; 变量赋新值，例如”Hook”。在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;captain = &quot;Hook&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意你的左手边有个红色小感叹号标志。这代表你的代码有错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/7.png&quot; alt=&quot;图7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击标志，会弹出提示错误信息”Cannot assign to ‘let’ value ‘captain’ “。这表示一旦你初始化的变量定义为 &lt;em&gt;let&lt;/em&gt; ，它的值就不能够被改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/8.png&quot; alt=&quot;图8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;移除 &lt;code&gt;captain = &quot;Hook&quot;&lt;/code&gt; 来摆脱错误。&lt;br /&gt;
挑战：定义一个 &lt;em&gt;Int&lt;/em&gt; 常量 &lt;em&gt;favoriteNumber&lt;/em&gt; ，并且设置你喜欢的数字。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let favoriteNumber: Int = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;inferred-typing&quot;&gt;类型推导（Inferred Typing）&lt;/h1&gt;

&lt;p&gt;打字累了把？不用怕，Swift已经为你想好了。&lt;br /&gt;
Swift的一个新特性叫类型推导。意思是如果你在定义变量的时候提供了初始化值，Swift能够预期知道数据类型以至于你不需要声明变量的类型。&lt;br /&gt;
这样不仅能够为编程的时候节省时间，而且能够让你的代码更简单。&lt;/p&gt;

&lt;p&gt;尝试一下将代码 &lt;code&gt;&quot; var luckyNumber: Int = 7 &quot;&lt;/code&gt; 替换成以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var luckyNumber: Int = 7 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/9.jpg&quot; alt=&quot;图9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这也许看起来不是个大事，但是长远来说它节省了你许多宝贵时间！&lt;br /&gt;
记住，类型推导只会在你提供了正确的信息后才会工作。如果你希望变量 &lt;em&gt;luckyNumber&lt;/em&gt; 是 &lt;em&gt;Double&lt;/em&gt; 类型，你需要设置 &lt;em&gt;luckyNumber&lt;/em&gt; 等于7.0(清晰的表示它就是个浮点数,而不是一个整型)。&lt;/p&gt;

&lt;p&gt;挑战：将之前的变量或者常量改成使用类型推导。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
 
var str = &quot;Look what I can do!&quot;
var age = 18
 
var luckyNumber = 7
var costOfCandy = 1.25
var hungry = true
var name = &quot;Ryland&quot;
 
name = &quot;Ry&quot;
 
var favoriteGame = &quot;Mario Kart&quot;
favoriteGame = &quot;Super Smash Bros.&quot;
 
let life = 42
let pi = 3.14
let canTouchThis = false
let captain = &quot;Kirk&quot;
 
let favoriteNumber = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-5&quot;&gt;比较运算符&lt;/h1&gt;

&lt;p&gt;如前面所解释Playground能够做数学运算，比较数字和值。这些操作符包括如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;gt; 大于&lt;/li&gt;
  &lt;li&gt;&amp;lt; 小于&lt;/li&gt;
  &lt;li&gt;== 等于&lt;/li&gt;
  &lt;li&gt;&amp;gt;= 大于等于&lt;/li&gt;
  &lt;li&gt;&amp;amp;&amp;amp; 逻辑与&lt;/li&gt;
  &lt;li&gt;|| 逻辑或&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;能够使用这些操作符来对比两个值。&lt;br /&gt;
首先，定义一些变量并且初始化它们，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let batmanCoolness = 10
var supermanCoolness = 9
var aquamanCoolness = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很好！现在你能够使用其中的两个变量进行比较运算符测试。在playground的底部编写如下代码块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;batmanCoolness &amp;lt; aquamanCoolness
supermanCoolness &amp;gt;= 8
batmanCoolness == (aquamanCoolness + supermanCoolness)
batmanCoolness &amp;gt; aquamanCoolness &amp;amp;&amp;amp; batmanCoolness == (aquamanCoolness + supermanCoolness)
batmanCoolness &amp;lt; supermanCoolness || aquamanCoolness &amp;lt; supermanCoolness
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;观察窗口右手边的灰色区域。Playground将会将表达式的比较结果显示在里面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/10.png&quot; alt=&quot;图10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AND表达式(&amp;amp;&amp;amp;)，两边的表达式都必须为真才为真。OR表达式(||)，两个表达式只要一个为真就为真。如果左边的表达式已经为真，那么剩下的表达式将不会被执行。&lt;/p&gt;

&lt;p&gt;挑战：尝试为蜘蛛侠定义一个新变量 &lt;em&gt;spidermanCoolness&lt;/em&gt; 并且给它一个冷酷的值。然后尝试使用比较运算符(如 &amp;gt;, &amp;lt;, ==, &amp;amp;&amp;amp;, 和 ||)对比蜘蛛侠和其他超级英雄的冷酷值。 &lt;em&gt;(注意我定义了一个不可变的蝙蝠侠常量 batmanCoolness)&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/11.png&quot; alt=&quot;图11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var spidermanCoolness = 7
(spidermanCoolness + aquamanCoolness) &amp;gt; supermanCoolness
spidermanCoolness == 7 &amp;amp;&amp;amp; aquamanCoolness == 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;ifelse&quot;&gt;if/else控制流语句&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;if&lt;/em&gt; 语句中，如果表达式为真，计算机将会执行为真的代码块，如果表示为假，计算机将不会执行为真的代码块。&lt;br /&gt;
在playground的底部编写如下代码块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (batmanCoolness &amp;gt; spidermanCoolness) {
  spidermanCoolness = spidermanCoolness - 1
} else if (batmanCoolness &amp;gt;= spidermanCoolness) {
  spidermanCoolness = spidermanCoolness - 1
} else {
  spidermanCoolness = spidermanCoolness + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果蝙蝠侠（Batman）更冷酷那么蜘蛛侠（Spiderman）的冷酷值会递减，如果蜘蛛侠更冷酷那么蜘蛛侠的冷酷值会递增。&lt;/p&gt;

&lt;p&gt;如果蜘蛛侠的冷酷值不等于蝙蝠侠，你可以通过Playground让蜘蛛侠的冷酷值减少至6。正如你看到的灰色区域，程序永远不会进入 &lt;em&gt;else if&lt;/em&gt; 语句，甚至 &lt;em&gt;else if&lt;/em&gt; 语句为真。这是因为程序已经找到第一个 &lt;em&gt;if&lt;/em&gt; 语句为真，所以不会检测剩下的 &lt;em&gt;if/else&lt;/em&gt; 语句。&lt;/p&gt;

&lt;p&gt;挑战：在最后一个例子下面使用超级英雄（superheroes）创建你自己的控制流语句。记住，并不是 &lt;em&gt;if&lt;/em&gt; 或者 &lt;em&gt;else if&lt;/em&gt; 语句中必须有一个为真。程序要么执行 &lt;em&gt;else&lt;/em&gt; 语句，要么在程序中继续执行它的下一步内容。&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(supermanCoolness &amp;lt; spidermanCoolness)  {
  supermanCoolness = supermanCoolness - 1 
  spidermanCoolness = spidermanCoolness + 1
} else if (supermanCoolness == spidermanCoolness)  {
  supermanCoolness = supermanCoolness + 1
  spidermanCoolness = spidermanCoolness + 1
} else  {
  supermanCoolness = supermanCoolness + 1 
  spidermanCoolness = spidermanCoolness - 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-6&quot;&gt;简单函数&lt;/h1&gt;

&lt;p&gt;函数(Functions)就是一块实现某些任务的代码。例如，一个函数 &lt;em&gt;printMyFavoriteSnack()&lt;/em&gt; 会打印”Pringles”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/12.jpg&quot; alt=&quot;图12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以编写你自己使用的函数，也可以使用别的程序猿（媛）写的函数。例如，苹果提供了一些内置让你使用的功能函数。&lt;br /&gt;
比如 &lt;em&gt;print()&lt;/em&gt; 函数。当你调用print函数，程序会”打印”圆括号内的内容到控制台上。&lt;/p&gt;

&lt;p&gt;快速尝试一下，在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Hello, World&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你应该会看到 “Hello, World” 打印在你的右手边窗口上。&lt;/p&gt;

&lt;p&gt;任何编程都会涉及到许多不同功能的函数。有时候你会使用到苹果或者其他开发人员的函数，就像刚才完成的功能print，有时候你要自己写函数，稍后你就会体会到。&lt;/p&gt;

&lt;p&gt;挑战：尝试修改函数 &lt;em&gt;print()&lt;/em&gt; 括号内的字符串，告诉大家一些关于你的好事情。另外，你也可以放入一个超级英雄的冷酷值变量到括号内看看发生什么。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;博主真帅&quot;)
print(batmanCoolness)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;string-interpolation&quot;&gt;字符串插值(String Interpolation)&lt;/h1&gt;

&lt;p&gt;打印一串字符到控制台上已经会了，但是如果你能在一句语句里面打印一串字符和变量值的结合不是更好吗?&lt;/p&gt;

&lt;p&gt;幸运的是，你可以做到！就是字符串插值（String Interpolation）。&lt;/p&gt;

&lt;p&gt;例如你想说“Sally has (some value) apples.”的时候这功能非常有用。在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Sally has \(apples) apples&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到了啥？通过使用格式 &lt;em&gt;\(变量名)&lt;/em&gt; ，你就能够打印出任何字符串。甚至能够在括号内进行运算操作。在playground的底部编写如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;Sally has \(apples - 5) apples&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做得好！字符串插值会在你每次写代码中运用到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/13.png&quot; alt=&quot;图13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挑战：是时候结合你所学的概念。创建两个变量代表班里学生的成绩：John的分数95和Sam的分数为85。然后创建比较他们两个分数的 &lt;em&gt;if/else&lt;/em&gt; 语句，并且打印出John的分数小于，大于，或者等于Sam的分数。我相信你能够做到！&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var johnsGrade = 95
var samsGrade = 82
if (johnsGrade &amp;lt; samsGrade) {
  print(&quot;\(johnsGrade) is less than \(samsGrade)&quot;)
}
else if (johnsGrade &amp;gt; samsGrade) {
  print(&quot;\(johnsGrade) is greater than \(samsGrade)&quot;)
}
else {
  print(&quot;\(johnsGrade) is equal to \(samsGrade)&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;whilewhile-loops&quot;&gt;While循环(While Loops)&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;While&lt;/em&gt; 循环是另一种控制流语句,例如你之前学的 &lt;em&gt;if/else&lt;/em&gt; 语句。它们实际上功能很相似,都必须提供一条可执行的条件语句。&lt;/p&gt;

&lt;p&gt;不同的是，&lt;em&gt;while&lt;/em&gt; 语句不止简单的执行代码块一次，只要 &lt;em&gt;while&lt;/em&gt; 条件语句为真，代码块里面内容会被一直执行。在playground底部添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var secondsLeft = 3
while (secondsLeft &amp;gt; 0) {
  print(secondsLeft)
  secondsLeft = secondsLeft - 1
}
print(&quot;Blast off!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确保你的条件语句在某一时刻变成假。你不会想创建一个死循环，因为会导致出现各种问题以及程序不会继续往下执行。&lt;br /&gt;
运行代码，你将会看到右手边的（3 times）执行次数，print()函数打印出了每一次循环的内容。一旦多个值被打印出来后，你需要打开另外一个窗口编辑器助手(Assistant Editor)才能看到打印出来的内容。&lt;br /&gt;
如何打开？找到屏幕顶部菜单，选择 &lt;em&gt;View\Assistant Editor\Show Assistant Editor&lt;/em&gt; 。在框中标记控制台输出,你应该会看到你打印的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/14.png&quot; alt=&quot;图14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挑战：尝试自己写一个 &lt;em&gt;while&lt;/em&gt; 循环 - 例如创建一个警察正在吃一些甜甜圈的 &lt;em&gt;while&lt;/em&gt; 循环。记住，防止死循环！&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var donutsLeft = 6
while(donutsLeft &amp;gt; 0)  {
  print(&quot;You have \(donutsLeft) donuts left&quot;)
  donutsLeft = donutsLeft - 1
  print(&quot;You eat one donut&quot;)
}
print(&quot;You are all out of donuts :(&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;break&quot;&gt;Break语句&lt;/h1&gt;

&lt;p&gt;你的程序有一些循环的代码，比如 &lt;em&gt;while&lt;/em&gt; 循环，你也许想在一件特殊情况发生的时候退出循环。 &lt;em&gt;break&lt;/em&gt; 命令因此而诞生。根据这个场景在playground底部添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var cokesLeft = 7
var fantasLeft = 4
while(cokesLeft &amp;gt; 0)  {
  print(&quot;You have \(cokesLeft) Cokes left.&quot;)
  cokesLeft = cokesLeft - 1
  if(cokesLeft &amp;lt;= fantasLeft)  {
    break
  }
}
print(&quot;You stop drinking Cokes.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个例子中，你想要喝冰箱里的可乐直到喝完为止。但是，你发现冰箱里还有芬达。当你发现可乐数量小于等于芬达的数量的时候你决定不喝可乐而去喝完冰箱里的芬达。当出现这种情况时，你退出该循环，并且从而停止喝可乐。(这个例子还蛮蛋疼的)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/15.png&quot; alt=&quot;图15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挑战：轮到你编程了。创建一个有结束点的 &lt;em&gt;while&lt;/em&gt; 循环。例如老板走到身边的时候停止偷懒。在这个循环中，添加一个 &lt;em&gt;if&lt;/em&gt; 条件语句来 &lt;em&gt;break&lt;/em&gt; 循环。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var goofOffTime = 10
var bossComing = 0
while(goofOffTime &amp;gt; 0)  {
  print(&quot;Goofing off!&quot;)
  goofOffTime = goofOffTime - 1
  bossComing = bossComing + 1
  if(goofOffTime == bossComing)  {
    break
  }
}
print(&quot;Done goofing off.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;continue&quot;&gt;Continue语句&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Continue&lt;/em&gt; 语句跟 &lt;em&gt;break&lt;/em&gt; 语句有些相似，然而，不同于退出循环，它的功能是告诉程序进行下一次循环。在playground底部添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var numbers = 0
while(numbers &amp;lt;= 10)  {
  if(numbers == 9)  {
    numbers = numbers + 1
    continue
  }
  print(numbers)
  numbers = numbers + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来你能在控制台看到程序打印出来的内容，0到10之间的数字被打印出来除了9，因为9太坏，被7吃了。出于这个原因，我们的列表中不能包括他。&lt;br /&gt;
&lt;img src=&quot;/img/swift-tutorial-series/d1/16.png&quot; alt=&quot;图16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挑战：在你的循环中使用 &lt;em&gt;continue&lt;/em&gt; 语句。找一个特定的值写个条件语句进行 &lt;em&gt;continue&lt;/em&gt; 命令进行下一个循环，其他的值继续执行。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&quot;List of World Wars:&quot;)
var ww = 1
while(ww &amp;lt;= 5)  {
  if(ww == 3 || ww == 4)  {
    ww = ww + 1
    continue
  }
  print(&quot;World War \(ww)&quot;)
  ww = ww + 1
}
print(&quot;That&#39;s the beauty of World War V, Lois. It&#39;s so intense it skips over the other two. - Peter Griffin&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;optionals&quot;&gt;Optionals(可选类型)&lt;/h1&gt;

&lt;p&gt;有时，由于使用了不同的功能，你并不知道一个变量是否有值。当它没有值的时候为 &lt;em&gt;nil&lt;/em&gt; 。这就引入了 &lt;em&gt;optionals(可选类型)&lt;/em&gt; 。&lt;br /&gt;
可选类型的变量能够包含值或者 &lt;em&gt;nil&lt;/em&gt; 。定义成可选类型表示这个变量可以设置成 &lt;em&gt;nil&lt;/em&gt; 值:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var optionalNumber: Int? = 5
optionalNumber = nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入?(问号)将变量定义成可选类型。如果想知道可选变量是包含一个值还是 &lt;em&gt;nil&lt;/em&gt; 值，需要调用 &lt;em&gt;if let&lt;/em&gt; 语句。就像下面这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if let number = optionalNumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;if let&lt;/em&gt; 语句作用实际上跟if语句很相似。如果 &lt;em&gt;optionalNumber&lt;/em&gt; 包含一个 &lt;em&gt;Int&lt;/em&gt; 整型，&lt;em&gt;number&lt;/em&gt; 变量将会被设置成该值，并且 &lt;em&gt;if let&lt;/em&gt; 花括号内的代码会被执行。&lt;/p&gt;

&lt;p&gt;可选地，如果optionalNumber返回nil你可以设置执行else语句。&lt;/p&gt;

&lt;p&gt;挑战：为 &lt;em&gt;optionalNumber&lt;/em&gt; 编写一条 &lt;em&gt;if let&lt;/em&gt; 语句根据包含值或者 &lt;em&gt;nil&lt;/em&gt; 打印不同的字符串。&lt;br /&gt;
解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if let number = optionalNumber  {
  print(&quot;It is a number&quot;)
}
else  {
  print(&quot;It is not a number&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conversion-between-data-types&quot;&gt;数据类型之间的转换(Conversion Between Data Types)&lt;/h1&gt;

&lt;p&gt;让我们看看它在程序中发挥着什么作用。可选类型能够帮助你在两个变量之间进行类型转换。尝试以下代码将 &lt;em&gt;String&lt;/em&gt; 转换成 &lt;em&gt;Int&lt;/em&gt; 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var languagesLearned: String = &quot;3&quot;
var languagesLearnedNum: Int? = Int(languagesLearned)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;languagesLearned&lt;/em&gt; 定义成 &lt;em&gt;String&lt;/em&gt; 类型并且初始化值为”3”，&lt;em&gt;languagesLearnedNum&lt;/em&gt; 定义成一个可选类型并且等于 &lt;em&gt;toInt()&lt;/em&gt; 。这个方法跟你之前选的 &lt;em&gt;print()&lt;/em&gt; 函数非常相似，不同的是它们是class(类)中的一部分。接下来你会学的更多。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Int()&lt;/em&gt; 是一个构造器，允许你将一个 &lt;em&gt;String&lt;/em&gt; 类型的值转化成 &lt;em&gt;Int&lt;/em&gt; 类型。之所以要将 &lt;em&gt;languagesLearnedNum&lt;/em&gt; 设置成可选类型是因为转化后的值可能为 &lt;em&gt;nil&lt;/em&gt; 。有可能尝试转换的 &lt;em&gt;String&lt;/em&gt; 变量值不是一个数字，而是”Hello, World”。&lt;/p&gt;

&lt;p&gt;编写以下代码来找出答案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if let num = languagesLearnedNum  {
  print(&quot;It is a number&quot;)
}
else  {
  print(&quot;It is not a number&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;if let&lt;/em&gt; 语句用来检验 &lt;em&gt;languagesLearnedNum&lt;/em&gt; 是否包含值。如果变量包含值，该值赋值到 &lt;em&gt;num&lt;/em&gt; 变量并且执行花括号内的代码。如果为 &lt;em&gt;nil&lt;/em&gt; ，将执行 &lt;em&gt;else&lt;/em&gt; 括号内的代码。&lt;/p&gt;

&lt;p&gt;如果将字符串 &lt;em&gt;languagesLearned&lt;/em&gt; 变量值改成”Three”看看会发生什么。程序将会打印”It is not a number”到控制台因为执行”Three”转成 &lt;em&gt;Int&lt;/em&gt; 返回结果 &lt;em&gt;nil&lt;/em&gt; 给 &lt;em&gt;languagesLearnedNum&lt;/em&gt; 变量。&lt;/p&gt;

&lt;p&gt;#综合所学&lt;/p&gt;

&lt;p&gt;挑战：最后一道！尝试编写一个变量存放 &lt;em&gt;String&lt;/em&gt; 转换 &lt;em&gt;Int&lt;/em&gt; 的结果值。接着将结果放在 &lt;em&gt;if&lt;/em&gt; 语句中与其他变量进行比较并执行 &lt;em&gt;print()&lt;/em&gt; 函数。 &lt;em&gt;print()&lt;/em&gt; 函数花括号内应该使用字符串插值(String Interpolation)，因此你可以打印一个值大于/小于另外一个值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/swift-tutorial-series/d1/17.png&quot; alt=&quot;图17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var tutorialTeam: String = &quot;55&quot;
var editorialTeam = 23
 
var tutorialTeamNum: Int? = Int(tutorialTeam)
 
if let numTutorial = tutorialTeamNum  {
  if(numTutorial &amp;gt; editorialTeam)  {
    print(&quot;\(numTutorial) is greater than \(editorialTeam)&quot;)
  } else if (numTutorial &amp;lt; editorialTeam) {
    print(&quot;\(numTutorial) is less than \(editorialTeam)&quot;)
  } else  {
    print(&quot;\(numTutorial) is equal to \(editorialTeam)&quot;)
  }
} else  {
  print(&quot;Invalid entry&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-7&quot;&gt;何去何从？&lt;/h1&gt;

&lt;p&gt;到目前为止这边教程系列的&lt;a href=&quot;http://cdn3.raywenderlich.com/wp-content/uploads/2015/09/MyPlaygroundplayground.zip&quot;&gt;完整playground文件&lt;/a&gt;。&lt;br /&gt;
点击该系列&lt;a href=&quot;/2016/02/28/swift-tutorial-2/&quot;&gt;下一篇&lt;/a&gt;教程，你将会学到如何将你已学到Swift知识来创建一个简单的命令行猜数字游戏！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你有问题或者反馈，加入下面的评论系统！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-8&quot;&gt;著作权声明&lt;/h1&gt;
&lt;p&gt;本文译自&lt;a href=&quot;http://www.raywenderlich.com/114148/learn-to-code-ios-apps-with-swift-tutorial-1-welcome-to-programming&quot;&gt;Learn to Code iOS Apps with Swift Tutorial 1: Welcome to Programming&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Feb 2016 05:49:33 +0800</pubDate>
        <link>http://jrjian.github.io/2016/02/28/swift-tutorial-1/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2016/02/28/swift-tutorial-1/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>教程</category>
        
        <category>翻译</category>
        
        
      </item>
    
      <item>
        <title>NSValueTransformer教程</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;由于最近在用Mantle框架，发现代码中使用了 &lt;code&gt;NSValueTransformer&lt;/code&gt;，看懵了，不知道是用来干啥的，根据字面意思猜了个大概是 &lt;em&gt;值转换&lt;/em&gt;，为了认清这个东西，所以去了&lt;a href=&quot;http://nshipster.cn&quot;&gt;NSHipster&lt;/a&gt;查看了相关教程。由于发现作者讲的东西相对对于初学者来说可能有些难消化，所以产生了对原文进行更清晰的讲解的念头。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NSValueTransformer&lt;/code&gt; 是一个抽象类，用来将一个输入的类型值转换成另为一个类型值，主要被用于 AppKit 框架的 Cocoa binding 中。它指定了可以处理哪类输入，并且合适时甚至支持反向的转换。&lt;/p&gt;

&lt;p&gt;创建一个 &lt;code&gt;NSValueTransformer&lt;/code&gt; 子类，重写几个必要的方法来实现自定义转化。&lt;br /&gt;
有些类似于 &lt;code&gt;Protocol&lt;/code&gt;，定义了一些需要子类自己去实现的方法。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实战&lt;/h2&gt;

&lt;p&gt;下面继承自 &lt;code&gt;NSValueTransformer&lt;/code&gt; 的实现代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassNameTransformer: NSValueTransformer {}// 继承NSValueTransformer
@end

#pragma mark -

@implementation ClassNameTransformer

+ (Class)transformedValueClass {// 输出的源的类型
    // 经过测试，调用转换的时候，并没有调用该方法，
    // 该方法只是告诉使用者，我输出的类型是 NSString 类型
    return [NSString class];
}

+ (BOOL)allowsReverseTransformation {// 是否允许逆向转换
    // YES 需要实现 reverseTransformedValue:
    // NO 不需要实现
    // ⚠️：当返回 NO，如果调用了 reverseTransformedValue，
        由于当前类没有实现该方法，系统会自动调用 transformedValue:
    return NO; 
}

- (id)transformedValue:(id)value {// 转换输入的值成另一个值
    // 返回输入的值对应类型的字符串
    return (value == nil) ? nil : NSStringFromClass([value class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们通常不会直接初始化 &lt;code&gt;NSValueTransformer&lt;/code&gt;。而是，与 &lt;code&gt;NSPersistentStore&lt;/code&gt; 和 &lt;code&gt;NSURLProtocol&lt;/code&gt; 类似，需要注册相应的实现类&lt;code&gt;setValueTransformer:forName:&lt;/code&gt;，由管理者角色的对象负责初始化它们——这里有点不同的是，你需要为注册的对象指定一个唯一的名字。&lt;/p&gt;

&lt;p&gt;下面是Demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString * const ClassNameTransformerName = @&quot;ClassNameTransformer&quot;;

// 注册
[NSValueTransformer setValueTransformer:[[ClassNameTransformer alloc] init] forName:ClassNameTransformerName];

// 获得已经注册过的 NSValueTransformer
NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:ClassNameTransformerName];

NSDate *date = [NSDate date];
NSString *className = [valueTransformer transformedValue:date];

// 由于 ClassNameTransformer 没有实现 reverseTransformedValue:
// 故系统自动调用 transformedValue:
NSString *value     = [valueTransformer reverseTransformedValue:className];
NSLog(@&quot;%@, %@&quot;, className, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果输出 __NSDate， NSTaggedPointerString&lt;/p&gt;

&lt;p&gt;我们可以在实现 &lt;code&gt;ClassNameTransformer&lt;/code&gt; 的时候，在 &lt;code&gt;+initialize&lt;/code&gt; 方法中注册该对象，这样我们在使用的时候，就直接获取该 &lt;code&gt;transformer&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;改版后的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern NSString * const ClassNameTransformerName;

@interface ClassNameTransformer: NSValueTransformer {}
@end

#pragma mark -

NSString * const ClassNameTransformerName = @&quot;ClassNameTransformer&quot;;

@implementation ClassNameTransformer

+ (void)initialize {
    [NSValueTransformer setValueTransformer:[[ClassNameTransformer alloc] init] forName:ClassNameTransformerName];
}

+ (Class)transformedValueClass {
    return [NSString class];
}

+ (BOOL)allowsReverseTransformation {
    return YES;
}

- (id)transformedValue:(id)value {
    return (value == nil) ? nil : NSStringFromClass([value class]);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改版后的demo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:ClassNameTransformerName];

NSDate *date = [NSDate date];
NSString *className = [valueTransformer transformedValue:date];
NSString *value     = [valueTransformer reverseTransformedValue:className];
NSLog(@&quot;%@, %@&quot;, className, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-3&quot;&gt;优化&lt;/h2&gt;

&lt;p&gt;到这里你可能发现了 &lt;code&gt;NSValueTransformer&lt;/code&gt; 的一个大毛病：它太难用了！如果定义多个转换器，那不是有很多冗余的代码？创建一个类，实现一大把的方法，声明一个常量，并且还要在 &lt;code&gt;+initialize&lt;/code&gt; 方法中注册它？我看还是别用算了。&lt;/p&gt;

&lt;p&gt;在这个使用 &lt;code&gt;block&lt;/code&gt; 的年代，我们想要——不对，需要——一种一行（坨）代码就能搞定的实现方式。&lt;/p&gt;

&lt;p&gt;一点儿元编程就可以轻松搞定这件事情。&lt;a href=&quot;https://github.com/mattt/TransformerKit/blob/master/TransformerKit/NSValueTransformer%2BTransformerKit.m#L36&quot;&gt;戳这里获取封装好的代码&lt;/a&gt;，然后我们使用的时候可以如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString * const TKCapitalizedStringTransformerName = @&quot;TKCapitalizedStringTransformerName&quot;;

// 注册一个实现了逆向转换的 NSValueTransformer 
[NSValueTransformer registerValueTransformerWithName:TKCapitalizedStringTransformerName transformedValueClass:[NSString class] returningTransformedValueWithBlock:^id(id value) {
    return [value capitalizedString];
} allowingReverseTransformationWithBlock:^id(id value) {
    return [value lowercaseString];
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作者是利用了 &lt;code&gt;runtime&lt;/code&gt; 的机制，将这几个需要实现的方法通过用 &lt;code&gt;block&lt;/code&gt; 的方式在运行时动态生成自定义的 &lt;code&gt;NSValueTransformer&lt;/code&gt; 对象，是不是很方便。&lt;br /&gt;
也许有人会问，这种数据转化我自定义一个类方法不就好了，如果需要逆向，实现两个互相转化的工具方法就好了，为什么需要用 &lt;code&gt;NSValueTransformer&lt;/code&gt; 这么复杂的东西？&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;优点:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;NSValueTransformers&lt;/code&gt; 可以很好地用于表示一个转换链。比如，一个应用可能需要把用户输入经过一系列的转换（比如，去掉首尾空格，去掉注音字符，然后让首字母大写）后才能把结果发送到主干系统中。&lt;/li&gt;
  &lt;li&gt;与 &lt;code&gt;block&lt;/code&gt; 不同的是，&lt;code&gt;NSValueTransformer&lt;/code&gt; 封装了反向转换。比如说，你想要把 REST API 中的键值与模型对象的属性一一对应(&lt;a href=&quot;https://github.com/Mantle/Mantle&quot;&gt;Mantle&lt;/a&gt;)；你可以创建一个可以逆向转换的 &lt;code&gt;NSValueTransformer&lt;/code&gt; 类，初始化时把 snake_case 转换为 llamaCase，发送数据到服务器端时把 llamaCase 转换为 snake_case。&lt;/li&gt;
  &lt;li&gt;另外一个优于 &lt;code&gt;block&lt;/code&gt; 的地方是：&lt;code&gt;NSValueTransformer&lt;/code&gt; 子类可以暴露出新的属性来配置转换行为。增加成员变量还可以简单清楚地记录结果，或者保存一些转换过程中需要用到的东西。&lt;/li&gt;
  &lt;li&gt;不要忘了，我们还可以用在 &lt;code&gt;Core Data&lt;/code&gt; 中使用 &lt;code&gt;NSValueTransformer&lt;/code&gt;，可以用它从二进制字段中编码及解码出组合数据。这些年似乎不再流行这么做了，但是，对于那些模型化得不是很好的信息，把简单的数据用这种方式序列化是非常有效的。但是不要这样把图片存到数据库中——那八成不会是个好主意。 &lt;em&gt;(这个我也不是很懂！)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 00:44:33 +0800</pubDate>
        <link>http://jrjian.github.io/2015/12/20/iOS-NSValueTransformer-tutorial/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/12/20/iOS-NSValueTransformer-tutorial/</guid>
        
        <category>iOS</category>
        
        <category>NSValueTransformer</category>
        
        <category>教程</category>
        
        
      </item>
    
      <item>
        <title>iOS实用小功能</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;播打电话号码&lt;/h2&gt;

&lt;p&gt;1.最直接方式 &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;tel://020-10086&quot;]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：打完电话后，停留在通讯录界面，不会自动跳回APP界面。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.访问私有API&lt;/p&gt;

&lt;p&gt;&lt;em&gt;该方式拨号，会先提示是否进行拨打。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;telprompt://020-10086&quot;]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：私有API，可能会被苹果审核不通过，拒绝发布。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3.通过内嵌UIWebView，拨打完毕后，会自动切回APP界面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;UIWebView *myWebView = [[UIWebView alloc] initWithFrame:CGRectZero];
[myWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;tel://020-10086&quot;]]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;注意：不需要addSubview&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;app-store&quot;&gt;跳转到APP Store评分界面&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;NSString *urlStr = @&quot;替换成下面提供的两种方式&quot;;
NSURL *url = [NSURL URLWithString:urlStr];
if ([[UIApplication sharedApplication] canOpenURL:url]) {
    [[UIApplication sharedApplication] openURL:url];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;你的设备IOS版本&amp;gt;=IOS7&lt;/code&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;@&quot;itms-apps://itunes.apple.com/app/YOUR_APP_ID&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;你的设备IOS版本&amp;lt;IOS7&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;@&quot;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;amp;id=YOUR_APP_ID&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;发短信&lt;/h2&gt;

&lt;p&gt;1.最直接方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;sms://10086&quot;]];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;式缺点：不能指定短信内容，并且操作完毕后，不会跳回APP界面&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.采用&lt;code&gt;MFMessageComposeViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1).先引入框架&lt;code&gt;#import &amp;lt;MessageUI/MessageUI.h&amp;gt;&lt;/code&gt;   &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;if ([MFMailComposeViewController canSendMail]) {
    MFMessageComposeViewController *messageController = [[MFMessageComposeViewController alloc] init];
    messageController.body = @&quot;短信内容&quot;;
    messageController.recipients = @[@&quot;收件人列表-1-10086&quot;,@&quot;2-10000&quot;];
    messageController.delegate = self;
    [self presentViewController:messageController animated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2).实现委托&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;#pragma mark - MFMessageComposeViewControllerDelegate
- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result {
    [controller dismissViewControllerAnimated:YES completion:nil];
    if (result == MessageComposeResultCancelled) {
        NSLog(@&quot;取消发送&quot;);
    } else if (result == MessageComposeResultSent) {
        NSLog(@&quot;发送成功&quot;);
    } else {
        NSLog(@&quot;发送失败&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;优点：可以指定发送内容，发送完毕可以切回APP界面。&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;发邮件&lt;/h2&gt;

&lt;p&gt;1.最直接方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;NSString *url = @&quot;mailto:自己的邮箱@qq.com?cc=抄送人&amp;amp;subject=主题!&amp;amp;body=内容!&quot;; 
[[UIApplication sharedApplication] openURL: [NSURL URLWithString: url]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;缺点：字符串复杂，可读性差。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.采用&lt;code&gt;MFMailComposeViewController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1).先引入框架&lt;code&gt;#import &amp;lt;MessageUI/MessageUI.h&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;if ([MFMailComposeViewController canSendMail]) {
    MFMailComposeViewController* mailController = [[MFMailComposeViewController alloc] init];
    mailController.mailComposeDelegate = self;
    [mailController setSubject:@&quot;标题&quot;];
    [mailController setMessageBody:@&quot;邮件内容。&quot; isHTML:NO];
    [mailController setToRecipients:@[@&quot;收件人1&quot;, @&quot;收件人2&quot;,]];
    [mailController setCcRecipients:@[@&quot;抄送人1&quot;, @&quot;抄送人2&quot;,]];
    [mailController setBccRecipients:@[@&quot;密送人1&quot;, @&quot;密送人2&quot;,]];
    if (mailController)
        [self presentViewController:mailController animated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2).实现委托&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;#pragma mark - MFMailComposeViewControllerDelegate
- (void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {
    /*
    enum MFMailComposeResult {
        MFMailComposeResultCancelled, //取消发送
        MFMailComposeResultSaved, //保存草稿
        MFMailComposeResultSent, //发送成功
        MFMailComposeResultFailed, //发送失败
    };
    */
    [controller dismissViewControllerAnimated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;应用程序之间跳转&lt;/h2&gt;

&lt;p&gt;1.被跳转的APP设置&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注意：URL Schemes是一个数组，可以用逗号隔开&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015-12-08-iOS-small-functions/illustration-1.jpg&quot; alt=&quot;设置引导图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.打开其他APP的代码如下，identifier跟schemes就是上图设置的URL Types参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;// @param Identifier:需要跳入的应用程序配置文件设置的APP URL type里面的identifier
// @param UrlSchemes:需要跳入的应用程序配置文件设置的APP URL type里面的URL scheme
NSURL *appUrl = [NSURL URLWithString:@&quot;Identifier://UrlSchemes&quot;];
UIApplication *app = [UIApplication sharedApplication];
// 1.先判断能否打开软件
if ([app canOpenURL:appUrl]) {
    [app openURL:appUrl];
} else { // 2.不能打开，去appStore下载
    NSURL *downloadUrl = [NSURL URLWithString:@&quot;yourAppUrl&quot;];
    if ([app canOpenURL:downloadUrl]) {
        app openURL:downloadUrl];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.通过safari游览器打开APP&lt;/p&gt;

&lt;p&gt;&lt;code&gt;在地址栏输入要打开的APP的URL schemes即可，如testApp://&lt;/code&gt;&lt;br /&gt;
   &lt;code&gt;带参数形式：testApp://?token=123abct&amp;amp;registered=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4.通过访问网页打开APP&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;待续…&lt;/h1&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 05:49:33 +0800</pubDate>
        <link>http://jrjian.github.io/2015/12/09/iOS-small-functions/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/12/09/iOS-small-functions/</guid>
        
        <category>iOS</category>
        
        <category>实用功能</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Jian Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Jian 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 年，Jian 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;在玩了github之后，发现github可以定制自己的网站。所以花了一天时间搞搞Personal Blog!&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。  &lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io#featured-tags&quot;&gt;Hux Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功 &lt;a href=&quot;https://ruby.taobao.org&quot;&gt;RubyGems 镜像&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），**Hux Blog的作者补了很多Bootstrap的缺陷，并且优化了文字布局排版等，具体可以看&lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io#featured-tags&quot;&gt;原文&lt;/a&gt;……&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;蛮喜欢这个主题风格的blog，后续慢慢加强前端的技能，同时build出令自己满意的Jian Blog!&lt;/p&gt;

&lt;p&gt;—— Jian 后记于 2015.10&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 20:00:00 +0800</pubDate>
        <link>http://jrjian.github.io/2015/11/28/hello-2015/</link>
        <guid isPermaLink="true">http://jrjian.github.io/2015/11/28/hello-2015/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
